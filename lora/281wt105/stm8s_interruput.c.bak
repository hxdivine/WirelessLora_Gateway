


#include "stm8s.h"
#include "stm8s_uart1.h"
#include "stm8s_ADC2.h"
#include "hw_config.h" 
#include "pub.h"
#include "flash_eeprom.h"

vu16  Sys1msCnt=0;
vu8 SysSec=0;
u8 SelCh=0;

#pragma vector=1
__interrupt void TRAP_IRQHandler(void)
{
  
}
#pragma vector=2
__interrupt void TLI_IRQHandler(void)
{
  
}
#pragma vector=3
__interrupt void AWU_IRQHandler(void)
{
  
}
#pragma vector=4
__interrupt void CLK_IRQHandler(void)
{
  
  
}
#pragma vector=5
__interrupt void EXTI_PORTA_IRQHandler(void)
{
  
}
#pragma vector=6
__interrupt void EXTI_PORTB_IRQHandler(void)
{
  
}
#pragma vector=7
__interrupt void EXTI_PORTC_IRQHandler(void)
{
  
}
#pragma vector=8
__interrupt void EXTI_PORTD_IRQHandler(void)
{
  
}
#pragma vector=9
__interrupt void EXTI_PORTE_IRQHandler(void)
{
   
}
#ifdef STM8S903
#pragma vector=0xA
__interrupt void EXTI_PORTF_IRQHandler(void)
{
  
}
#endif
#ifdef STM8S208
#pragma vector=0xA
__interrupt void CAN_RX_IRQHandler(void)
{
  
}
#pragma vector=0xB
__interrupt void CAN_TX_IRQHandler(void)
{
  
}
#endif
#pragma vector=0xC
__interrupt void SPI_IRQHandler(void)
{
  
}
#pragma vector=11+2
__interrupt void TIM1_UPD_OVF_TRG_BRK_IRQHandler(void)
{
    
 
  
}
#pragma vector=0xE
__interrupt void TIM1_CAP_COM_IRQHandler(void)
{
  
}
#pragma vector=13+2
__interrupt void TIM2_UPD_OVF_TRG_BRK_IRQHandler(void)
{
    static u16 cnt=0;
    cnt++;
    if(cnt>=1000){
        cnt=0;
        SysSec++;
    }
	Sys1msCnt++;
	if(HaveSet){
		WORKLEDON
	}
    else{
        if(Sys1msCnt&0x80)
            WORKLEDON
        else          
           WORKLEDOFF
    }      
    if(CommCnt){
       CommCnt--;
       COMMLEDON
    }
    else 
        COMMLEDOFF
            
    if(AlarmCnt){
       AlarmCnt--;
       ALARMLEDON
    }
    else 
        ALARMLEDOFF
	
   
	
	
	

	
    TIM2->SR1 = (uint8_t)(~TIM2_IT_UPDATE);//TIM1_ClearITPendingBit(TIM1_IT_UPDATE);
  
}
#pragma vector=14+2
__interrupt void TIM2_CAP_COM_IRQHandler(void)
{
  
}

#pragma vector=17+2
__interrupt void UART1_TX_IRQHandler(void)
{ 
    
    
 /*   UART1->DR = TxBuffer1[TxPtr1];
    TxPtr1++;
    TxPtr1=TxPtr1&(UART_SENDBUF_SIZE1-1);		
    if(TxPtr1 >=TxSav){        
        UART1->CR2&=~0x80;
    }*/
}
#pragma vector=18+2
__interrupt void UART1_RX_IRQHandler(void)
{ 
    //u8 dat;
   
    if(UART1->SR & UART1_FLAG_RXNE){
        UART1->SR &=~ UART1_FLAG_RXNE;
        //dat=UART1_ReceiveData8();
        uart1Isr(UART1->DR);
    }
}
#pragma vector=0x16
__interrupt void UART3_TX_IRQHandler(void)
{
  
}
#pragma vector=0x17
__interrupt void UART3_RX_IRQHandler(void)
{
  
   
  
}
 u16 rmp;
#pragma vector=22+2


__interrupt void Adc1_IRQHandler(void)
{ 
    static u16 AdVal=0;
 //   ALARMON
    ADC2->CSR &=~0x80;//清?耖??颏
    if(SelCh<4){//在切换通道时，第一次罪魁会丢数据
      SelCh++; 
      rmp=ADC2->DRH<<8;  //不空读一次，会影响下个数据
      rmp+=ADC2->DRL;
    }
    else if(SelCh<8){   
      
        AdVal+=((ADC2->DRH)<<8);
        AdVal+=ADC2->DRL;
        SelCh++;    
        if(SelCh==8){
            ad1=AdVal;
            AdVal=0;
            ADC2->CSR &= (uint8_t)(~ADC2_CSR_CH);//清通道
            ADC2->CSR |= (uint8_t)(ADC2_CHANNEL_7);
        }
       // ADC2->CR1 |= ADC2_CR1_ADON;
    }
     else if(SelCh<8+4){   
       SelCh++; 
        rmp=ADC2->DRH<<8;
        rmp+=ADC2->DRL;
     }
    else if(SelCh<16){            
        AdVal+=((ADC2->DRH)<<8);
        AdVal+=ADC2->DRL;
        SelCh++;    
        if(SelCh==16){
            SelCh=0;
            ad2=AdVal;
            AdVal=0;
            ADC2->CSR &= (uint8_t)(~ADC2_CSR_CH);//清通道
            ADC2->CSR |= (uint8_t)(ADC2_CHANNEL_6);
        }
      //  else 
      //  ADC2->CR1 |= ADC2_CR1_ADON;
    }    
    else {
        SelCh=0;
        AdVal=0;
    }
  //ALARMOFF
}


/******************* (C) COPYRIGHT 风驰电子嵌入式开发工作室 *****END OF FILE****/