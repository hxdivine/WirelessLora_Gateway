<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\S282_GateWay.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\S282_GateWay.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Mon Sep 27 23:34:01 2021
<BR><P>
<H3>Maximum Stack Usage =       1368 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; NetPro &rArr; GprsRunning &rArr; SmsFun &rArr; GSMAnalySms &rArr; SmsAnaSetCmd &rArr; GSMReplyFunc &rArr; SmsSendDat &rArr; SmsSendGsm &rArr; WaitGsmChar &rArr; delay_1ms &rArr; NorPro &rArr; PcCmdPro &rArr; SetTerminalW2Info &rArr; DownLoad2TerminalWT2 &rArr; SendLoraData &rArr; JudgeDevSendTim &rArr; LoraPro &rArr;  SendLoraData (Cycle)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[23]">CAN0_EWMC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[23]">CAN0_EWMC_IRQHandler</a><BR>
 <LI><a href="#[1f3]">UdpSendData</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e6]">uip_process</a><BR>
 <LI><a href="#[1e9]">TcpSendData</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e6]">uip_process</a><BR>
 <LI><a href="#[117]">SendGprsDat</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[eb]">delay_1ms</a><BR>
 <LI><a href="#[b8]">LoraPro</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7e]">SendLoraData</a><BR>
 <LI><a href="#[7b]">cJSON_Delete</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7b]">cJSON_Delete</a><BR>
 <LI><a href="#[22f]">parse_object</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21a]">parse_value</a><BR>
 <LI><a href="#[22b]">parse_array</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21a]">parse_value</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1f]">ADC0_1_IRQHandler</a> from adc.o(i.ADC0_1_IRQHandler) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[7]">BusFault_Handler</a> from gd32e10x_it.o(i.BusFault_Handler) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[23]">CAN0_EWMC_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[21]">CAN0_RX0_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[22]">CAN0_RX1_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[20]">CAN0_TX_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[4b]">CAN1_EWMC_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[49]">CAN1_RX0_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[4a]">CAN1_RX1_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[48]">CAN1_TX_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[18]">DMA0_Channel0_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[19]">DMA0_Channel1_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[1a]">DMA0_Channel2_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[1b]">DMA0_Channel3_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[1c]">DMA0_Channel4_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[1d]">DMA0_Channel5_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[1e]">DMA0_Channel6_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[43]">DMA1_Channel0_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[44]">DMA1_Channel1_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[45]">DMA1_Channel2_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[46]">DMA1_Channel3_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[47]">DMA1_Channel4_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[a]">DebugMon_Handler</a> from gd32e10x_it.o(i.DebugMon_Handler) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[3c]">EXMC_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[13]">EXTI0_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[35]">EXTI10_15_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[14]">EXTI1_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[15]">EXTI2_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[16]">EXTI3_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[17]">EXTI4_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[24]">EXTI5_9_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[11]">FMC_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[5]">HardFault_Handler</a> from gd32e10x_it.o(i.HardFault_Handler) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[2d]">I2C0_ER_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[2c]">I2C0_EV_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[2f]">I2C1_ER_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[2e]">I2C1_EV_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[e]">LVD_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[6]">MemManage_Handler</a> from gd32e10x_it.o(i.MemManage_Handler) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[4]">NMI_Handler</a> from gd32e10x_it.o(i.NMI_Handler) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[b]">PendSV_Handler</a> from gd32e10x_it.o(i.PendSV_Handler) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[12]">RCU_CTC_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[36]">RTC_Alarm_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[10]">RTC_IRQHandler</a> from rtc.o(i.RTC_IRQHandler) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[3]">Reset_Handler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[30]">SPI0_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[31]">SPI1_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[3e]">SPI2_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[9]">SVC_Handler</a> from gd32e10x_it.o(i.SVC_Handler) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[c]">SysTick_Handler</a> from gd32e10x_it.o(i.SysTick_Handler) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[4e]">SystemInit</a> from system_gd32e10x.o(i.SystemInit) referenced from startup_gd32e10x.o(.text)
 <LI><a href="#[f]">TAMPER_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[25]">TIMER0_BRK_TIMER8_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[28]">TIMER0_Channel_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[27]">TIMER0_TRG_CMT_TIMER10_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[26]">TIMER0_UP_TIMER9_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[29]">TIMER1_IRQHandler</a> from tim1.o(i.TIMER1_IRQHandler) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[2a]">TIMER2_IRQHandler</a> from tim2.o(i.TIMER2_IRQHandler) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[2b]">TIMER3_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[3d]">TIMER4_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[41]">TIMER5_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[42]">TIMER6_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[38]">TIMER7_BRK_TIMER11_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[3b]">TIMER7_Channel_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[3a]">TIMER7_TRG_CMT_TIMER13_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[39]">TIMER7_UP_TIMER12_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[3f]">UART3_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[40]">UART4_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[32]">USART0_IRQHandler</a> from usart.o(i.USART0_IRQHandler) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[33]">USART1_IRQHandler</a> from usart.o(i.USART1_IRQHandler) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[34]">USART2_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[4c]">USBFS_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[37]">USBFS_WKUP_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[8]">UsageFault_Handler</a> from gd32e10x_it.o(i.UsageFault_Handler) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[d]">WWDGT_IRQHandler</a> from startup_gd32e10x.o(.text) referenced from startup_gd32e10x.o(RESET)
 <LI><a href="#[4f]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_gd32e10x.o(.text)
 <LI><a href="#[52]">_sputc</a> from printf8.o(i._sputc) referenced from printf8.o(i.__0sprintf$8)
 <LI><a href="#[50]">bufchar</a> from mqttpacket.o(i.bufchar) referenced from mqttpacket.o(i.MQTTPacket_decodeBuf)
 <LI><a href="#[51]">fputc</a> from usart.o(i.fputc) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[2]">free</a> from malloc.o(i.free) referenced 2 times from cjson.o(.data)
 <LI><a href="#[4d]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[1]">malloc</a> from malloc.o(i.malloc) referenced 2 times from cjson.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[4f]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(.text)
</UL>
<P><STRONG><a name="[253]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[53]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[69]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[254]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[255]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[256]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[257]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[258]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[3]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>CAN0_EWMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_EWMC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_EWMC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>CAN0_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>CAN0_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN0_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>CAN1_EWMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA0_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA0_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA0_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA0_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA0_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA0_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA0_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA1_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>EXMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>EXTI10_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI5_9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C0_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C0_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>LVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>RCU_CTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIMER0_BRK_TIMER8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIMER0_Channel_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIMER0_TRG_CMT_TIMER10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIMER0_UP_TIMER9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIMER4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIMER5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIMER6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIMER7_BRK_TIMER11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIMER7_Channel_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIMER7_TRG_CMT_TIMER13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIMER7_UP_TIMER12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>USBFS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>USBFS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>WWDGT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>tolower</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tolower.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_strcasecmp
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
</UL>

<P><STRONG><a name="[170]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysInfoDef
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTerminalW2Info
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCString
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMQTTString
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_msg
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_send
</UL>

<P><STRONG><a name="[176]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTerminalW2Info
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttConnect
</UL>

<P><STRONG><a name="[259]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[56]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_arp_out
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[25a]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[25b]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[55]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelDevWT2Config
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearSysInfo
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsAnaSetCmd
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyModBus
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttPublish
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_msg
</UL>

<P><STRONG><a name="[aa]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearSysInfo
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
</UL>

<P><STRONG><a name="[25c]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[57]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[174]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDevicePara
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCString
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTstrlen
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_appcall
</UL>

<P><STRONG><a name="[22c]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_msg
</UL>

<P><STRONG><a name="[235]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolv_query
</UL>

<P><STRONG><a name="[232]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
</UL>

<P><STRONG><a name="[58]"></a>strncasecmp</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, strncasecmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = strncasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyJsonFromCould
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyJson
</UL>

<P><STRONG><a name="[5a]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[5f]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[60]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[61]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[62]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_SetFreq
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[63]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[64]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDataValToStr
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_SetFreq
</UL>

<P><STRONG><a name="[65]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
</UL>

<P><STRONG><a name="[67]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDataValToStr
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_SetFreq
</UL>

<P><STRONG><a name="[20d]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[68]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[5b]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[25d]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[66]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[25e]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[5c]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[25f]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[260]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[5e]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[5d]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[20e]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[261]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[54]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[262]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[6a]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[263]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[264]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1f]"></a>ADC0_1_IRQHandler</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, adc.o(i.ADC0_1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC0_1_IRQHandler &rArr; adc_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_regular_data_read
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_interrupt_flag_get
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_interrupt_flag_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>ADC_EXTI_Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, adc.o(i.ADC_EXTI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_EXTI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_interrupt_flag_clear
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_interrupt_enable
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_calibration_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAdc
</UL>

<P><STRONG><a name="[71]"></a>AliyunSendDOResp</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, aliyuniot.o(i.AliyunSendDOResp))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AliyunSendDOResp &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttSendDOResp
</UL>

<P><STRONG><a name="[73]"></a>AnalyJson</STRONG> (Thumb, 332 bytes, Stack size 48 bytes, mqttcouldpub.o(i.AnalyJson))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = AnalyJson &rArr; AnalyJsonFromCould &rArr; cJSON_Parse &rArr; cJSON_ParseWithOpts &rArr; parse_value &rArr; parse_number &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S282_Log
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyJsonFromCould
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Parse
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetObjectItem
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetArrayItem
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttSetDOToWT2
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttSendDOResp
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_ClientString
</UL>

<P><STRONG><a name="[74]"></a>AnalyJsonFromCould</STRONG> (Thumb, 320 bytes, Stack size 40 bytes, mqttcouldpub.o(i.AnalyJsonFromCould))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = AnalyJsonFromCould &rArr; cJSON_Parse &rArr; cJSON_ParseWithOpts &rArr; parse_value &rArr; parse_number &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S282_Log
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Parse
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetObjectItem
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttSetDOToWT2
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttSendDOResp
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyJson
</UL>

<P><STRONG><a name="[7c]"></a>AnalyModBus</STRONG> (Thumb, 1636 bytes, Stack size 72 bytes, modbus.o(i.AnalyModBus))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = AnalyModBus &rArr; SetDODevBufData &rArr; DownLoad2TerminalWT2 &rArr; SendLoraData &rArr; JudgeDevSendTim &rArr; LoraPro &rArr;  SendLoraData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveSysInfo
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S282_Log
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendLoraData
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModBusCrc
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysInfoData
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetReplayBuf
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDODevBufData
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReplyModBus
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysInfoData
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDevOnlineStatus
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDODevBufData
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDIDevBufData
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthFun
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsFun
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_appcall
</UL>

<P><STRONG><a name="[88]"></a>AnalyTarIp</STRONG> (Thumb, 644 bytes, Stack size 32 bytes, ethnet.o(i.AnalyTarIp))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = AnalyTarIp &rArr; str2ip &rArr; str2hex
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_connect
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolv_query
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolv_getserver
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolv_conf
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str2ip
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIPaVailable
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S282_Log
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSecCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetRunning
</UL>

<P><STRONG><a name="[fe]"></a>AutoLineBreak</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, smsinstruct.o(i.AutoLineBreak))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsAnaSetCmd
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGprsServer
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGprsAPNConfig
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEthServer
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDeviceStatus
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDevCommunicateState
</UL>

<P><STRONG><a name="[7]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32e10x_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>ChangeTempDevID</STRONG> (Thumb, 46 bytes, Stack size 20 bytes, loradealdat.o(i.ChangeTempDevID))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ChangeTempDevID &rArr; GetTempDevPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTempDevPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTerminalW2Info
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTerminalW1Info
</UL>

<P><STRONG><a name="[f9]"></a>CharToByte</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, modbus.o(i.CharToByte))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDevOnlineStatus
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDODevBufData
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDIDevBufData
</UL>

<P><STRONG><a name="[93]"></a>CheckAt</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gsm234g.o(i.CheckAt))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = CheckAt &rArr; SendCmd &rArr; delay_1ms &rArr; NorPro &rArr; PcCmdPro &rArr; SetTerminalW2Info &rArr; DownLoad2TerminalWT2 &rArr; SendLoraData &rArr; JudgeDevSendTim &rArr; LoraPro &rArr;  SendLoraData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenGSM
</UL>

<P><STRONG><a name="[95]"></a>CheckConn</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ethnet.o(i.CheckConn))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = CheckConn &rArr; InitNet &rArr; tapdev_init &rArr; ENC28J60_Init &rArr; ENC28J60_PHY_Write &rArr; ENC28J60_Write &rArr; ENC28J60_Set_Bank &rArr; ENC28J60_Write_Op &rArr; Spi1ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNet
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetRunning
</UL>

<P><STRONG><a name="[19a]"></a>CheckDevUId</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, dealdat.o(i.CheckDevUId))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CheckDevUId
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcCmdPro
</UL>

<P><STRONG><a name="[97]"></a>CheckPower</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, hardware.o(i.CheckPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CheckPower &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDogFeed
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_port_get
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiClose
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseGSM
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemReset
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareCheck
</UL>

<P><STRONG><a name="[a0]"></a>CheckRefactory</STRONG> (Thumb, 208 bytes, Stack size 8 bytes, hardware.o(i.CheckRefactory))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CheckRefactory &rArr; SetSysInfoDef &rArr; SetUserInfoDef &rArr; SaveUserInfo &rArr; WriteConfig &rArr; W25Q_Write &rArr; W25Q_Erase_Sector &rArr; W25Q_Wait_Busy &rArr; W25Q_ReadSR &rArr; Spi1ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysInfoDef
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMs
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_port_get
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSecCnt
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemReset
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareCheck
</UL>

<P><STRONG><a name="[a3]"></a>CheckTempDev</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, loradealdat.o(i.CheckTempDev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CheckTempDev &rArr; GetTempDevPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTempDevPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveTempDev
</UL>

<P><STRONG><a name="[a4]"></a>ChekPwd</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, hardware.o(i.ChekPwd))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ChekPwd &rArr; ReadSysInfo &rArr; ReadConfig &rArr; W25Q_Read &rArr; Spi1ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSysInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareCheck
</UL>

<P><STRONG><a name="[a6]"></a>ClearHistory</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, config.o(i.ClearHistory))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ClearHistory &rArr; SaveUserInfo &rArr; WriteConfig &rArr; W25Q_Write &rArr; W25Q_Erase_Sector &rArr; W25Q_Wait_Busy &rArr; W25Q_ReadSR &rArr; Spi1ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveUserInfo
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseChipOrSector
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcCmdPro
</UL>

<P><STRONG><a name="[a9]"></a>ClearSysInfo</STRONG> (Thumb, 306 bytes, Stack size 8 bytes, config.o(i.ClearSysInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ClearSysInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysInfoDef
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDevicePara
</UL>

<P><STRONG><a name="[9b]"></a>CloseGSM</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hardware.o(i.CloseGSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CloseGSM
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPower
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestartGSM
</UL>

<P><STRONG><a name="[cf]"></a>CompEthData</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ethnet.o(i.CompEthData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CompEthData
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthFun
</UL>

<P><STRONG><a name="[11a]"></a>CompGprsData</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, gprsnet.o(i.CompGprsData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CompGprsData
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsFun
</UL>

<P><STRONG><a name="[ad]"></a>CompStr</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, hardware.o(i.CompStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CompStr
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDevicePara
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveStrData
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveIntData
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareDevInfo
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcCmdPro
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsAnaSetCmd
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsAnalysisCmd3GOr4G
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsAnalysisCmd2G
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMToAnalysisData
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMAnalySms
</UL>

<P><STRONG><a name="[ac]"></a>CompareDevInfo</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, dealdat.o(i.CompareDevInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CompareDevInfo &rArr; CompStr
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompStr
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTerminalW2Info
</UL>

<P><STRONG><a name="[ae]"></a>CopyDevInfo</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, dealdat.o(i.CopyDevInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CopyDevInfo &rArr; CopyStr
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyStr
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTerminalW2Info
</UL>

<P><STRONG><a name="[af]"></a>CopyStr</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, hardware.o(i.CopyStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CopyStr
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyDevInfo
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsAnaSetCmd
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNetStatus
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNetPriority
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGprsServer
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGprsAPNConfig
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEthServer
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDeviceTim
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDeviceStatus
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDeviceId
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUtcTime
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRestartMsg
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsConnectServer
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMSetGprs
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMqttConnectData
</UL>

<P><STRONG><a name="[b0]"></a>DebugHistory</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, dealdat.o(i.DebugHistory))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DebugHistory &rArr; SendString &rArr; PutInUart0 &rArr; WatchDogFeed
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendString
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAlarmHistory
</UL>

<P><STRONG><a name="[a]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32e10x_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[b2]"></a>DebugSysInfo</STRONG> (Thumb, 2038 bytes, Stack size 24 bytes, hardware.o(i.DebugSysInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DebugSysInfo &rArr; SendString &rArr; PutInUart0 &rArr; WatchDogFeed
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendString
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_port_get
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcCmdPro
</UL>

<P><STRONG><a name="[b3]"></a>DelDevWT2Config</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, config.o(i.DelDevWT2Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = DelDevWT2Config &rArr; WriteConfig &rArr; W25Q_Write &rArr; W25Q_Erase_Sector &rArr; W25Q_Wait_Busy &rArr; W25Q_ReadSR &rArr; Spi1ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteConfig
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcCmdPro
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsAnaSetCmd
</UL>

<P><STRONG><a name="[b5]"></a>DevInfoInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, config.o(i.DevInfoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DevInfoInit &rArr; ReadDevWT2Config &rArr; ReadConfig &rArr; W25Q_Read &rArr; Spi1ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDevWT2Config
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcCmdPro
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInfoInit
</UL>

<P><STRONG><a name="[1cf]"></a>DevInfoParamInit</STRONG> (Thumb, 222 bytes, Stack size 8 bytes, config.o(i.DevInfoParamInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DevInfoParamInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDevInfoDef
</UL>

<P><STRONG><a name="[b7]"></a>DownLoad2TerminalWT1</STRONG> (Thumb, 342 bytes, Stack size 16 bytes, loradealdat.o(i.DownLoad2TerminalWT1))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = DownLoad2TerminalWT1 &rArr; SendLoraData &rArr; JudgeDevSendTim &rArr; LoraPro &rArr;  SendLoraData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraPro
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMs
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDogFeed
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendLoraData
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTerminalW1Info
</UL>

<P><STRONG><a name="[b9]"></a>DownLoad2TerminalWT2</STRONG> (Thumb, 1560 bytes, Stack size 24 bytes, loradealdat.o(i.DownLoad2TerminalWT2))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = DownLoad2TerminalWT2 &rArr; SendLoraData &rArr; JudgeDevSendTim &rArr; LoraPro &rArr;  SendLoraData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraPro
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMs
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDogFeed
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendLoraData
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTerminalW2Info
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDODevBufData
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttSetDOToWT2
</UL>

<P><STRONG><a name="[ba]"></a>ENC28J60_Init</STRONG> (Thumb, 414 bytes, Stack size 16 bytes, enc28j60.o(i.ENC28J60_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ENC28J60_Init &rArr; ENC28J60_PHY_Write &rArr; ENC28J60_Write &rArr; ENC28J60_Set_Bank &rArr; ENC28J60_Write_Op &rArr; Spi1ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMs
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Write_Op
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Write
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Set_Bank
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Reset
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_PHY_Write
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_PHY_Read
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tapdev_init
</UL>

<P><STRONG><a name="[c1]"></a>ENC28J60_PHY_Read</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, enc28j60.o(i.ENC28J60_PHY_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ENC28J60_PHY_Read &rArr; ENC28J60_Write &rArr; ENC28J60_Set_Bank &rArr; ENC28J60_Write_Op &rArr; Spi1ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Write
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Packet_Receive
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Init
</UL>

<P><STRONG><a name="[bf]"></a>ENC28J60_PHY_Write</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, enc28j60.o(i.ENC28J60_PHY_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ENC28J60_PHY_Write &rArr; ENC28J60_Write &rArr; ENC28J60_Set_Bank &rArr; ENC28J60_Write_Op &rArr; Spi1ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Write
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tapdev_init
</UL>

<P><STRONG><a name="[c2]"></a>ENC28J60_Packet_Receive</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, enc28j60.o(i.ENC28J60_Packet_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ENC28J60_Packet_Receive &rArr; ENC28J60_PHY_Read &rArr; ENC28J60_Write &rArr; ENC28J60_Set_Bank &rArr; ENC28J60_Write_Op &rArr; Spi1ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Write_Op
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Write
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Read_Op
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Read_Buf
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_PHY_Read
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tapdev_read
</UL>

<P><STRONG><a name="[c5]"></a>ENC28J60_Packet_Send</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, enc28j60.o(i.ENC28J60_Packet_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ENC28J60_Packet_Send &rArr; ENC28J60_Write &rArr; ENC28J60_Set_Bank &rArr; ENC28J60_Write_Op &rArr; Spi1ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Write_Op
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Write_Buf
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Write
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tapdev_send
</UL>

<P><STRONG><a name="[bd]"></a>ENC28J60_Read</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, enc28j60.o(i.ENC28J60_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ENC28J60_Read &rArr; ENC28J60_Set_Bank &rArr; ENC28J60_Write_Op &rArr; Spi1ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Set_Bank
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Read_Op
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Packet_Send
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Packet_Receive
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_PHY_Write
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_PHY_Read
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enc28j60Check
</UL>

<P><STRONG><a name="[c4]"></a>ENC28J60_Read_Buf</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, enc28j60.o(i.ENC28J60_Read_Buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ENC28J60_Read_Buf &rArr; Spi1ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi1ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Packet_Receive
</UL>

<P><STRONG><a name="[c3]"></a>ENC28J60_Read_Op</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, enc28j60.o(i.ENC28J60_Read_Op))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ENC28J60_Read_Op &rArr; Spi1ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi1ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Packet_Receive
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Read
</UL>

<P><STRONG><a name="[bb]"></a>ENC28J60_Reset</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, enc28j60.o(i.ENC28J60_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ENC28J60_Reset &rArr; Spi1ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMs
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi1ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Init
</UL>

<P><STRONG><a name="[c0]"></a>ENC28J60_Set_Bank</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, enc28j60.o(i.ENC28J60_Set_Bank))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ENC28J60_Set_Bank &rArr; ENC28J60_Write_Op &rArr; Spi1ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Write_Op
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Write
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Read
</UL>

<P><STRONG><a name="[be]"></a>ENC28J60_Write</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, enc28j60.o(i.ENC28J60_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ENC28J60_Write &rArr; ENC28J60_Set_Bank &rArr; ENC28J60_Write_Op &rArr; Spi1ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Write_Op
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Set_Bank
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Packet_Send
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Packet_Receive
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_PHY_Write
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_PHY_Read
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Init
</UL>

<P><STRONG><a name="[c6]"></a>ENC28J60_Write_Buf</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, enc28j60.o(i.ENC28J60_Write_Buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ENC28J60_Write_Buf &rArr; Spi1ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi1ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Packet_Send
</UL>

<P><STRONG><a name="[bc]"></a>ENC28J60_Write_Op</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, enc28j60.o(i.ENC28J60_Write_Op))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ENC28J60_Write_Op &rArr; Spi1ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi1ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Write
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Set_Bank
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Packet_Send
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Packet_Receive
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Init
</UL>

<P><STRONG><a name="[18d]"></a>ETHLineOut</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, enc28j60.o(i.ETHLineOut))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetRunning
</UL>

<P><STRONG><a name="[c8]"></a>Enc28j60Check</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ethnet.o(i.Enc28j60Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Enc28j60Check &rArr; tapdev_init &rArr; ENC28J60_Init &rArr; ENC28J60_PHY_Write &rArr; ENC28J60_Write &rArr; ENC28J60_Set_Bank &rArr; ENC28J60_Write_Op &rArr; Spi1ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tapdev_init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Read
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S282_Log
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetRunning
</UL>

<P><STRONG><a name="[a7]"></a>EraseChipOrSector</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, config_interface.o(i.EraseChipOrSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = EraseChipOrSector &rArr; W25Q_Erase_Sector &rArr; W25Q_Wait_Busy &rArr; W25Q_ReadSR &rArr; Spi1ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Erase_Sector
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Erase_Chip
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearHistory
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInfoInit
</UL>

<P><STRONG><a name="[cc]"></a>EthFun</STRONG> (Thumb, 704 bytes, Stack size 8 bytes, ethnet.o(i.EthFun))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = EthFun &rArr; AnalyModBus &rArr; SetDODevBufData &rArr; DownLoad2TerminalWT2 &rArr; SendLoraData &rArr; JudgeDevSendTim &rArr; LoraPro &rArr;  SendLoraData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDogFeed
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UipClient2Server
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEthWithReg
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompEthData
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S282_LogInt
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S282_Log
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSecCnt
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyModBus
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetRunning
</UL>

<P><STRONG><a name="[d1]"></a>EthGetServerTime</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, ethnet.o(i.EthGetServerTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = EthGetServerTime &rArr; SetUtcTime &rArr; RTC_Set &rArr; RTCTimeToSeconds
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMs
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUtcTime
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S282_Log
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetRunning
</UL>

<P><STRONG><a name="[100]"></a>FindFreeIndex</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, dealdat.o(i.FindFreeIndex))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDevIndex
</UL>

<P><STRONG><a name="[d9]"></a>Flash_ReadWord</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sysflash.o(i.Flash_ReadWord))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fmc_ReadToFlash
</UL>

<P><STRONG><a name="[d3]"></a>Fmc_ErasePages</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, sysflash.o(i.Fmc_ErasePages))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Fmc_ErasePages &rArr; fmc_page_erase &rArr; fmc_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_unlock
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_page_erase
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_lock
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fmc_WriteToFlash
</UL>

<P><STRONG><a name="[d8]"></a>Fmc_ReadToFlash</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, sysflash.o(i.Fmc_ReadToFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Fmc_ReadToFlash
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReadWord
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadConfig
</UL>

<P><STRONG><a name="[da]"></a>Fmc_WriteToFlash</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, sysflash.o(i.Fmc_WriteToFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Fmc_WriteToFlash &rArr; Fmc_ErasePages &rArr; fmc_page_erase &rArr; fmc_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_word_program
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_unlock
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_lock
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_flag_clear
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fmc_ErasePages
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteConfig
</UL>

<P><STRONG><a name="[ed]"></a>GPRSLEDShow</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, hardware.o(i.GPRSLEDShow))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMInit
</UL>

<P><STRONG><a name="[dc]"></a>GSMAnalySms</STRONG> (Thumb, 364 bytes, Stack size 24 bytes, smsinstruct.o(i.GSMAnalySms))
<BR><BR>[Stack]<UL><LI>Max Depth = 1336<LI>Call Chain = GSMAnalySms &rArr; SmsAnaSetCmd &rArr; GSMReplyFunc &rArr; SmsSendDat &rArr; SmsSendGsm &rArr; WaitGsmChar &rArr; delay_1ms &rArr; NorPro &rArr; PcCmdPro &rArr; SetTerminalW2Info &rArr; DownLoad2TerminalWT2 &rArr; SendLoraData &rArr; JudgeDevSendTim &rArr; LoraPro &rArr;  SendLoraData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveUserInfo
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompStr
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UniToGbFunc
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsAnaSetCmd
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S282_Log
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLanguageMode
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsFun
</UL>

<P><STRONG><a name="[e0]"></a>GSMDelSms</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, smsinstruct.o(i.GSMDelSms))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = GSMDelSms &rArr; GSMRecOK &rArr; delay_1ms &rArr; NorPro &rArr; PcCmdPro &rArr; SetTerminalW2Info &rArr; DownLoad2TerminalWT2 &rArr; SendLoraData &rArr; JudgeDevSendTim &rArr; LoraPro &rArr;  SendLoraData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutInUart1
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteComm
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMRecOK
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsFun
</UL>

<P><STRONG><a name="[e4]"></a>GSMGetCsq</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gsm234g.o(i.GSMGetCsq))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = GSMGetCsq &rArr; SendCmd &rArr; delay_1ms &rArr; NorPro &rArr; PcCmdPro &rArr; SetTerminalW2Info &rArr; DownLoad2TerminalWT2 &rArr; SendLoraData &rArr; JudgeDevSendTim &rArr; LoraPro &rArr;  SendLoraData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMInit
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsFun
</UL>

<P><STRONG><a name="[e5]"></a>GSMGetMsgCap</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gsm234g.o(i.GSMGetMsgCap))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GSMGetMsgCap &rArr; WriteComm &rArr; PutInUart1 &rArr; WatchDogFeed
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteComm
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsFun
</UL>

<P><STRONG><a name="[e6]"></a>GSMGetReg</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, gsm234g.o(i.GSMGetReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = GSMGetReg &rArr; SendCmd &rArr; delay_1ms &rArr; NorPro &rArr; PcCmdPro &rArr; SetTerminalW2Info &rArr; DownLoad2TerminalWT2 &rArr; SendLoraData &rArr; JudgeDevSendTim &rArr; LoraPro &rArr;  SendLoraData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S282_Log
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsRunning
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMInit
</UL>

<P><STRONG><a name="[e7]"></a>GSMInit</STRONG> (Thumb, 296 bytes, Stack size 16 bytes, gsm234g.o(i.GSMInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = GSMInit &rArr; GSMSetGprs &rArr; SendCmd &rArr; delay_1ms &rArr; NorPro &rArr; PcCmdPro &rArr; SetTerminalW2Info &rArr; DownLoad2TerminalWT2 &rArr; SendLoraData &rArr; JudgeDevSendTim &rArr; LoraPro &rArr;  SendLoraData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSLEDShow
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutModuleVer
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGsmBasic
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S282_Log
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMSetGprs
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMGetReg
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMGetCsq
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TotalInit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestartGSM
</UL>

<P><STRONG><a name="[ee]"></a>GSMReadSms</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, smsinstruct.o(i.GSMReadSms))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = GSMReadSms &rArr; GSMRecOK &rArr; delay_1ms &rArr; NorPro &rArr; PcCmdPro &rArr; SetTerminalW2Info &rArr; DownLoad2TerminalWT2 &rArr; SendLoraData &rArr; JudgeDevSendTim &rArr; LoraPro &rArr;  SendLoraData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutInUart1
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteComm
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMRecOK
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsFun
</UL>

<P><STRONG><a name="[e3]"></a>GSMRecOK</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, gsm234g.o(i.GSMRecOK))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152<LI>Call Chain = GSMRecOK &rArr; delay_1ms &rArr; NorPro &rArr; PcCmdPro &rArr; SetTerminalW2Info &rArr; DownLoad2TerminalWT2 &rArr; SendLoraData &rArr; JudgeDevSendTim &rArr; LoraPro &rArr;  SendLoraData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsSendGsm
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMReadSms
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMDelSms
</UL>

<P><STRONG><a name="[ef]"></a>GSMReplyFunc</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, smsinstruct.o(i.GSMReplyFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1240<LI>Call Chain = GSMReplyFunc &rArr; SmsSendDat &rArr; SmsSendGsm &rArr; WaitGsmChar &rArr; delay_1ms &rArr; NorPro &rArr; PcCmdPro &rArr; SetTerminalW2Info &rArr; DownLoad2TerminalWT2 &rArr; SendLoraData &rArr; JudgeDevSendTim &rArr; LoraPro &rArr;  SendLoraData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsSendDat
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsAnaSetCmd
</UL>

<P><STRONG><a name="[ec]"></a>GSMSetGprs</STRONG> (Thumb, 254 bytes, Stack size 16 bytes, gsm234g.o(i.GSMSetGprs))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = GSMSetGprs &rArr; SendCmd &rArr; delay_1ms &rArr; NorPro &rArr; PcCmdPro &rArr; SetTerminalW2Info &rArr; DownLoad2TerminalWT2 &rArr; SendLoraData &rArr; JudgeDevSendTim &rArr; LoraPro &rArr;  SendLoraData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyStr
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsRunning
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMInit
</UL>

<P><STRONG><a name="[1d4]"></a>GbToUniFunc</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, smsinstruct.o(i.GbToUniFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GbToUniFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsSendDat
</UL>

<P><STRONG><a name="[f5]"></a>GetAlarmHistory</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, dealdat.o(i.GetAlarmHistory))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = GetAlarmHistory &rArr; ReadHistroy &rArr; ReadHistory &rArr; W25Q_Read &rArr; Spi1ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendString
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadHistroy
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutInUart0
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysTimCnt
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugHistory
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcCmdPro
</UL>

<P><STRONG><a name="[1ec]"></a>GetChipId</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hardware.o(i.GetChipId))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TotalInit
</UL>

<P><STRONG><a name="[85]"></a>GetDIDevBufData</STRONG> (Thumb, 952 bytes, Stack size 36 bytes, modbus.o(i.GetDIDevBufData))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GetDIDevBufData
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CharToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyModBus
</UL>

<P><STRONG><a name="[83]"></a>GetDODevBufData</STRONG> (Thumb, 322 bytes, Stack size 36 bytes, modbus.o(i.GetDODevBufData))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GetDODevBufData
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CharToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyModBus
</UL>

<P><STRONG><a name="[fa]"></a>GetDataValToStr</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, smsinstruct.o(i.GetDataValToStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = GetDataValToStr &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNumLen
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsAnaSetCmd
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGprsServer
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEthServer
</UL>

<P><STRONG><a name="[fd]"></a>GetDevCommunicateState</STRONG> (Thumb, 314 bytes, Stack size 16 bytes, smsinstruct.o(i.GetDevCommunicateState))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GetDevCommunicateState &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoLineBreak
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsAnaSetCmd
</UL>

<P><STRONG><a name="[ff]"></a>GetDevIndex</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, dealdat.o(i.GetDevIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetDevIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindFreeIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcCmdPro
</UL>

<P><STRONG><a name="[10d]"></a>GetDevOnlineIndex</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, hardware.o(i.GetDevOnlineIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetDevOnlineIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTerminalRegData
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttSetRepBuf
</UL>

<P><STRONG><a name="[84]"></a>GetDevOnlineStatus</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, modbus.o(i.GetDevOnlineStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetDevOnlineStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CharToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyModBus
</UL>

<P><STRONG><a name="[101]"></a>GetDeviceId</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, smsinstruct.o(i.GetDeviceId))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetDeviceId &rArr; CopyStr
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyStr
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsAnaSetCmd
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDeviceStatus
</UL>

<P><STRONG><a name="[102]"></a>GetDeviceStatus</STRONG> (Thumb, 520 bytes, Stack size 8 bytes, smsinstruct.o(i.GetDeviceStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetDeviceStatus &rArr; GetDeviceTim &rArr; CopyStr
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyStr
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_port_get
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDeviceTim
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDeviceId
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoLineBreak
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsAnaSetCmd
</UL>

<P><STRONG><a name="[103]"></a>GetDeviceTim</STRONG> (Thumb, 720 bytes, Stack size 8 bytes, smsinstruct.o(i.GetDeviceTim))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetDeviceTim &rArr; CopyStr
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyStr
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsAnaSetCmd
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDeviceStatus
</UL>

<P><STRONG><a name="[104]"></a>GetEthServer</STRONG> (Thumb, 212 bytes, Stack size 8 bytes, smsinstruct.o(i.GetEthServer))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = GetEthServer &rArr; GetDataValToStr &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyStr
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDataValToStr
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoLineBreak
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIPaVailable
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsAnaSetCmd
</UL>

<P><STRONG><a name="[105]"></a>GetGprsAPNConfig</STRONG> (Thumb, 242 bytes, Stack size 8 bytes, smsinstruct.o(i.GetGprsAPNConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetGprsAPNConfig &rArr; CopyStr
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyStr
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoLineBreak
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsAnaSetCmd
</UL>

<P><STRONG><a name="[106]"></a>GetGprsServer</STRONG> (Thumb, 218 bytes, Stack size 8 bytes, smsinstruct.o(i.GetGprsServer))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = GetGprsServer &rArr; GetDataValToStr &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyStr
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDataValToStr
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoLineBreak
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIPaVailable
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsAnaSetCmd
</UL>

<P><STRONG><a name="[107]"></a>GetHistoyrCodeLen</STRONG> (Thumb, 312 bytes, Stack size 16 bytes, config.o(i.GetHistoyrCodeLen))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GetHistoyrCodeLen &rArr; W25Q_Read &rArr; Spi1ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInfoInit
</UL>

<P><STRONG><a name="[de]"></a>GetLanguageMode</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, smsinstruct.o(i.GetLanguageMode))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsRunning
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMAnalySms
</UL>

<P><STRONG><a name="[109]"></a>GetMqttConnectData</STRONG> (Thumb, 458 bytes, Stack size 16 bytes, mqtt.o(i.GetMqttConnectData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetMqttConnectData &rArr; CopyStr
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyStr
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttSubscribe
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttPublish
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttConnect
</UL>

<P><STRONG><a name="[10a]"></a>GetNetPriority</STRONG> (Thumb, 208 bytes, Stack size 8 bytes, smsinstruct.o(i.GetNetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetNetPriority &rArr; CopyStr
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyStr
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsAnaSetCmd
</UL>

<P><STRONG><a name="[10b]"></a>GetNetStatus</STRONG> (Thumb, 326 bytes, Stack size 16 bytes, smsinstruct.o(i.GetNetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetNetStatus &rArr; CopyStr
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyStr
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsAnaSetCmd
</UL>

<P><STRONG><a name="[fb]"></a>GetNumLen</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, smsinstruct.o(i.GetNumLen))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDataValToStr
</UL>

<P><STRONG><a name="[89]"></a>GetSecCnt</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hardware.o(i.GetSecCnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetSecCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetRunning
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsRunning
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRefactory
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEthWithReg
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthFun
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyTarIp
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttPro
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttOfflineToSaveRegDat
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendGprsWithReg
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsFun
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMQTT_Tim
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttSendRegData
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_ClientString
</UL>

<P><STRONG><a name="[80]"></a>GetSysInfoData</STRONG> (Thumb, 328 bytes, Stack size 16 bytes, modbus.o(i.GetSysInfoData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetSysInfoData
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyModBus
</UL>

<P><STRONG><a name="[f7]"></a>GetSysTimCnt</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hardware.o(i.GetSysTimCnt))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAlarmHistory
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcCmdPro
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareCheck
</UL>

<P><STRONG><a name="[92]"></a>GetTempDevPtr</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, loradealdat.o(i.GetTempDevPtr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetTempDevPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeTempDevID
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTempDev
</UL>

<P><STRONG><a name="[10c]"></a>GetTerminalRegData</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, dealdat.o(i.GetTerminalRegData))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GetTerminalRegData &rArr; GetTerminalW2Info &rArr; SendString &rArr; PutInUart0 &rArr; WatchDogFeed
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendString
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTerminalW2Info
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDevOnlineIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcCmdPro
</UL>

<P><STRONG><a name="[10e]"></a>GetTerminalW2Info</STRONG> (Thumb, 942 bytes, Stack size 40 bytes, hardware.o(i.GetTerminalW2Info))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GetTerminalW2Info &rArr; SendString &rArr; PutInUart0 &rArr; WatchDogFeed
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendString
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTerminalRegData
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcCmdPro
</UL>

<P><STRONG><a name="[246]"></a>GetUipUdpConn</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, udp_client.o(i.GetUipUdpConn))
<BR><BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_client_appcall
</UL>

<P><STRONG><a name="[f4]"></a>GprsAnalysisCmd2G</STRONG> (Thumb, 286 bytes, Stack size 8 bytes, gsm234g.o(i.GprsAnalysisCmd2G))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GprsAnalysisCmd2G &rArr; CompStr
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompStr
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMToAnalysisData
</UL>

<P><STRONG><a name="[f2]"></a>GprsAnalysisCmd3GOr4G</STRONG> (Thumb, 492 bytes, Stack size 8 bytes, gsm234g.o(i.GprsAnalysisCmd3GOr4G))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GprsAnalysisCmd3GOr4G &rArr; CompStr
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompStr
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMToAnalysisData
</UL>

<P><STRONG><a name="[10f]"></a>GprsConnectServer</STRONG> (Thumb, 342 bytes, Stack size 24 bytes, gsm234g.o(i.GprsConnectServer))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192<LI>Call Chain = GprsConnectServer &rArr; SendCmd &rArr; delay_1ms &rArr; NorPro &rArr; PcCmdPro &rArr; SetTerminalW2Info &rArr; DownLoad2TerminalWT2 &rArr; SendLoraData &rArr; JudgeDevSendTim &rArr; LoraPro &rArr;  SendLoraData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyStr
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NumToStr
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIPaVailable
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S282_Log
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsGetServerTime
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsFun
</UL>

<P><STRONG><a name="[111]"></a>GprsDisConRemote</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, gsm234g.o(i.GprsDisConRemote))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = GprsDisConRemote &rArr; SendCmd &rArr; delay_1ms &rArr; NorPro &rArr; PcCmdPro &rArr; SetTerminalW2Info &rArr; DownLoad2TerminalWT2 &rArr; SendLoraData &rArr; JudgeDevSendTim &rArr; LoraPro &rArr;  SendLoraData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsDisConnect
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsFun
</UL>

<P><STRONG><a name="[112]"></a>GprsDisConnect</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, gsm234g.o(i.GprsDisConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = GprsDisConnect &rArr; GprsDisConRemote &rArr; SendCmd &rArr; delay_1ms &rArr; NorPro &rArr; PcCmdPro &rArr; SetTerminalW2Info &rArr; DownLoad2TerminalWT2 &rArr; SendLoraData &rArr; JudgeDevSendTim &rArr; LoraPro &rArr;  SendLoraData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMs
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDogFeed
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsDisConRemote
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsAnaSetCmd
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsGetServerTime
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsFun
</UL>

<P><STRONG><a name="[113]"></a>GprsFun</STRONG> (Thumb, 1468 bytes, Stack size 16 bytes, gprsnet.o(i.GprsFun))
<BR><BR>[Stack]<UL><LI>Max Depth = 1224<LI>Call Chain = GprsFun &rArr; RestartGSM &rArr; GSMInit &rArr; GSMSetGprs &rArr; SendCmd &rArr; delay_1ms &rArr; NorPro &rArr; PcCmdPro &rArr; SetTerminalW2Info &rArr; DownLoad2TerminalWT2 &rArr; SendLoraData &rArr; JudgeDevSendTim &rArr; LoraPro &rArr;  SendLoraData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDogFeed
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendGprsDat
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S282_LogInt
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S282_Log
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestartGSM
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttPro
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttOfflineToSaveRegDat
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsDisConnect
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsDisConRemote
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsConnectServer
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSecCnt
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyModBus
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendGprsWithReg
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsGetServerTime
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompGprsData
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsRunning
</UL>

<P><STRONG><a name="[114]"></a>GprsGetServerTime</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, gprsnet.o(i.GprsGetServerTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = GprsGetServerTime &rArr; GprsConnectServer &rArr; SendCmd &rArr; delay_1ms &rArr; NorPro &rArr; PcCmdPro &rArr; SetTerminalW2Info &rArr; DownLoad2TerminalWT2 &rArr; SendLoraData &rArr; JudgeDevSendTim &rArr; LoraPro &rArr;  SendLoraData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMs
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUtcTime
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S282_Log
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsDisConnect
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsConnectServer
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsFun
</UL>

<P><STRONG><a name="[11b]"></a>GprsRunning</STRONG> (Thumb, 318 bytes, Stack size 8 bytes, gprsnet.o(i.GprsRunning))
<BR><BR>[Stack]<UL><LI>Max Depth = 1352<LI>Call Chain = GprsRunning &rArr; SmsFun &rArr; GSMAnalySms &rArr; SmsAnaSetCmd &rArr; GSMReplyFunc &rArr; SmsSendDat &rArr; SmsSendGsm &rArr; WaitGsmChar &rArr; delay_1ms &rArr; NorPro &rArr; PcCmdPro &rArr; SetTerminalW2Info &rArr; DownLoad2TerminalWT2 &rArr; SendLoraData &rArr; JudgeDevSendTim &rArr; LoraPro &rArr;  SendLoraData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveUserInfo
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRestartMsg
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestartGSM
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSecCnt
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLanguageMode
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMSetGprs
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMGetReg
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsFun
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsFun
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetPro
</UL>

<P><STRONG><a name="[11e]"></a>HWyunSendDOResp</STRONG> (Thumb, 168 bytes, Stack size 48 bytes, huaweiiot.o(i.HWyunSendDOResp))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HWyunSendDOResp &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttSendDOResp
</UL>

<P><STRONG><a name="[11f]"></a>HWyunSendResp</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, huaweiiot.o(i.HWyunSendResp))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HWyunSendResp &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttSendDOResp
</UL>

<P><STRONG><a name="[5]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32e10x_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[120]"></a>HardwareCheck</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, netlink.o(i.HardwareCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HardwareCheck &rArr; SetWorkFreq &rArr; SX127X_SetFreq &rArr; SX127X_StartRx &rArr; SX127X_Write &rArr; SX127X_WriteBuffer &rArr; Spi1ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetWorkFreq
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChekPwd
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRefactory
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPower
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysTimCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[122]"></a>InitAdc</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, adc.o(i.InitAdc))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = InitAdc &rArr; adc_regular_channel_config
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMs
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_special_function_config
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_software_trigger_enable
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_regular_channel_config
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_mode_config
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_external_trigger_source_config
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_external_trigger_config
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_enable
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_deinit
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_data_alignment_config
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_channel_length_config
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_calibration_enable
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TotalInit
</UL>

<P><STRONG><a name="[12e]"></a>InitGPIO</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, hardware.o(i.InitGPIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = InitGPIO &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TotalInit
</UL>

<P><STRONG><a name="[ea]"></a>InitGsmBasic</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, gsm234g.o(i.InitGsmBasic))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = InitGsmBasic &rArr; SendCmd &rArr; delay_1ms &rArr; NorPro &rArr; PcCmdPro &rArr; SetTerminalW2Info &rArr; DownLoad2TerminalWT2 &rArr; SendLoraData &rArr; JudgeDevSendTim &rArr; LoraPro &rArr;  SendLoraData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S282_Log
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMInit
</UL>

<P><STRONG><a name="[12f]"></a>InitLocalIP</STRONG> (Thumb, 456 bytes, Stack size 16 bytes, ethnet.o(i.InitLocalIP))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = InitLocalIP
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_listen
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcCmdPro
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNet
</UL>

<P><STRONG><a name="[131]"></a>InitLora</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, lora.o(i.InitLora))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = InitLora &rArr; SX127X_Lora_init &rArr; SX127X_SetFreq &rArr; SX127X_StartRx &rArr; SX127X_Write &rArr; SX127X_WriteBuffer &rArr; Spi1ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_StartRx
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_Lora_init
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraDatPro
</UL>

<P><STRONG><a name="[134]"></a>InitNVIC</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, hardware.o(i.InitNVIC))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = InitNVIC &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TotalInit
</UL>

<P><STRONG><a name="[96]"></a>InitNet</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ethnet.o(i.InitNet))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = InitNet &rArr; tapdev_init &rArr; ENC28J60_Init &rArr; ENC28J60_PHY_Write &rArr; ENC28J60_Write &rArr; ENC28J60_Set_Bank &rArr; ENC28J60_Write_Op &rArr; Spi1ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLocalIP
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_arp_init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tapdev_init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolv_init
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetRunning
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TotalInit
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckConn
</UL>

<P><STRONG><a name="[13a]"></a>InitTimer1</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, tim1.o(i.InitTimer1))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = InitTimer1 &rArr; timer_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_clear
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_enable
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TotalInit
</UL>

<P><STRONG><a name="[140]"></a>InitUsart0</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, usart.o(i.InitUsart0))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = InitUsart0 &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_word_length_set
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_transmit_config
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_stop_bit_set
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_receive_config
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_parity_config
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_enable
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_hardware_flow_rts_config
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_hardware_flow_cts_config
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TotalInit
</UL>

<P><STRONG><a name="[14c]"></a>InitUsart1</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, usart.o(i.InitUsart1))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = InitUsart1 &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_word_length_set
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_transmit_config
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_stop_bit_set
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_receive_config
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_parity_config
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_enable
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_hardware_flow_rts_config
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_hardware_flow_cts_config
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenGSM
</UL>

<P><STRONG><a name="[8a]"></a>IsIPaVailable</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, hardware.o(i.IsIPaVailable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IsIPaVailable
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyTarIp
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGprsServer
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEthServer
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsConnectServer
</UL>

<P><STRONG><a name="[14d]"></a>JudgeDevSendTim</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, hardware.o(i.JudgeDevSendTim))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = JudgeDevSendTim &rArr; LoraPro &rArr;  SendLoraData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraPro
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDogFeed
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendLoraData
</UL>

<P><STRONG><a name="[14e]"></a>LoraDatPro</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, lora.o(i.LoraDatPro))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LoraDatPro &rArr; InitLora &rArr; SX127X_Lora_init &rArr; SX127X_SetFreq &rArr; SX127X_StartRx &rArr; SX127X_Write &rArr; SX127X_WriteBuffer &rArr; Spi1ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLora
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_Write
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_StartRx
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_RxPacket
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_Read
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_Current_RSSI
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraPro
</UL>

<P><STRONG><a name="[b8]"></a>LoraPro</STRONG> (Thumb, 448 bytes, Stack size 32 bytes, loradealdat.o(i.LoraPro))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + In Cycle
<LI>Call Chain = LoraPro &rArr;  SendLoraData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDogFeed
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UipClient2Server
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendGprsDat
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UipServer2Client
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isDevChipId
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isChipId
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDevRegVal
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendLoraData
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToHistory
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveTempDev
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeDevOnline
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraDatPro
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownLoad2TerminalWT2
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownLoad2TerminalWT1
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NorPro
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeDevSendTim
</UL>

<P><STRONG><a name="[15a]"></a>MQTTDeserialize_connack</STRONG> (Thumb, 118 bytes, Stack size 48 bytes, mqttconnectclient.o(i.MQTTDeserialize_connack))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MQTTDeserialize_connack &rArr; MQTTPacket_decodeBuf &rArr; MQTTPacket_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChar
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_decodeBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_ClientString
</UL>

<P><STRONG><a name="[15d]"></a>MQTTDeserialize_publish</STRONG> (Thumb, 168 bytes, Stack size 56 bytes, mqttdeserializepublish.o(i.MQTTDeserialize_publish))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MQTTDeserialize_publish &rArr; MQTTPacket_decodeBuf &rArr; MQTTPacket_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readMQTTLenString
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readInt
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChar
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_decodeBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_ClientString
</UL>

<P><STRONG><a name="[160]"></a>MQTTDeserialize_suback</STRONG> (Thumb, 146 bytes, Stack size 48 bytes, mqttsubscribeclient.o(i.MQTTDeserialize_suback))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MQTTDeserialize_suback &rArr; MQTTPacket_decodeBuf &rArr; MQTTPacket_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readInt
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChar
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_decodeBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_ClientString
</UL>

<P><STRONG><a name="[161]"></a>MQTTPacket_decode</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, mqttpacket.o(i.MQTTPacket_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MQTTPacket_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_decodeBuf
</UL>

<P><STRONG><a name="[15c]"></a>MQTTPacket_decodeBuf</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, mqttpacket.o(i.MQTTPacket_decodeBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MQTTPacket_decodeBuf &rArr; MQTTPacket_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_publish
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_connack
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_ClientString
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_suback
</UL>

<P><STRONG><a name="[166]"></a>MQTTPacket_encode</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, mqttpacket.o(i.MQTTPacket_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MQTTPacket_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_zero
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
</UL>

<P><STRONG><a name="[164]"></a>MQTTPacket_len</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, mqttpacket.o(i.MQTTPacket_len))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
</UL>

<P><STRONG><a name="[162]"></a>MQTTSerialize_connect</STRONG> (Thumb, 342 bytes, Stack size 40 bytes, mqttconnectclient.o(i.MQTTSerialize_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MQTTSerialize_connect &rArr; writeMQTTString &rArr; writeCString &rArr; writeInt
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCString
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connectLength
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMQTTString
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_len
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeInt
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeChar
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttConnect
</UL>

<P><STRONG><a name="[163]"></a>MQTTSerialize_connectLength</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, mqttconnectclient.o(i.MQTTSerialize_connectLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MQTTSerialize_connectLength &rArr; MQTTstrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTstrlen
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
</UL>

<P><STRONG><a name="[16b]"></a>MQTTSerialize_disconnect</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, mqttconnectclient.o(i.MQTTSerialize_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = MQTTSerialize_disconnect &rArr; MQTTSerialize_zero &rArr; MQTTPacket_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttDisConnect
</UL>

<P><STRONG><a name="[16d]"></a>MQTTSerialize_pingreq</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, mqttconnectclient.o(i.MQTTSerialize_pingreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = MQTTSerialize_pingreq &rArr; MQTTSerialize_zero &rArr; MQTTPacket_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttPingReq
</UL>

<P><STRONG><a name="[16e]"></a>MQTTSerialize_publish</STRONG> (Thumb, 176 bytes, Stack size 64 bytes, mqttserializepublish.o(i.MQTTSerialize_publish))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MQTTSerialize_publish &rArr; MQTTSerialize_publishLength &rArr; MQTTstrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMQTTString
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_len
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeInt
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeChar
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_encode
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publishLength
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttPublish
</UL>

<P><STRONG><a name="[16f]"></a>MQTTSerialize_publishLength</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, mqttserializepublish.o(i.MQTTSerialize_publishLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MQTTSerialize_publishLength &rArr; MQTTstrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTstrlen
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
</UL>

<P><STRONG><a name="[171]"></a>MQTTSerialize_subscribe</STRONG> (Thumb, 176 bytes, Stack size 56 bytes, mqttsubscribeclient.o(i.MQTTSerialize_subscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MQTTSerialize_subscribe &rArr; writeMQTTString &rArr; writeCString &rArr; writeInt
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMQTTString
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_len
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeInt
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeChar
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_encode
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribeLength
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttSubscribe
</UL>

<P><STRONG><a name="[172]"></a>MQTTSerialize_subscribeLength</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, mqttsubscribeclient.o(i.MQTTSerialize_subscribeLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MQTTSerialize_subscribeLength &rArr; MQTTstrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTstrlen
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
</UL>

<P><STRONG><a name="[16c]"></a>MQTTSerialize_zero</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, mqttconnectclient.o(i.MQTTSerialize_zero))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = MQTTSerialize_zero &rArr; MQTTPacket_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeChar
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_pingreq
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_disconnect
</UL>

<P><STRONG><a name="[173]"></a>MQTT_ClientString</STRONG> (Thumb, 310 bytes, Stack size 104 bytes, mqtt.o(i.MQTT_ClientString))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = MQTT_ClientString &rArr; AnalyJson &rArr; AnalyJsonFromCould &rArr; cJSON_Parse &rArr; cJSON_ParseWithOpts &rArr; parse_value &rArr; parse_number &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDogFeed
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S282_Log
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSecCnt
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_publish
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_connack
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_decodeBuf
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyJson
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_suback
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttPro
</UL>

<P><STRONG><a name="[16a]"></a>MQTTstrlen</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, mqttpacket.o(i.MQTTstrlen))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MQTTstrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connectLength
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribeLength
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publishLength
</UL>

<P><STRONG><a name="[6]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32e10x_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>ModBusCrc</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, modbuspub.o(i.ModBusCrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ModBusCrc
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyModBus
</UL>

<P><STRONG><a name="[175]"></a>MqttConnect</STRONG> (Thumb, 256 bytes, Stack size 104 bytes, mqtt.o(i.MqttConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = MqttConnect &rArr; UipClient2Server &rArr; UdpSendData &rArr;  uip_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UipClient2Server
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendGprsDat
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMqttConnectData
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttPro
</UL>

<P><STRONG><a name="[177]"></a>MqttDisConnect</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, mqtt.o(i.MqttDisConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MqttDisConnect &rArr; UipClient2Server &rArr; UdpSendData &rArr;  uip_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UipClient2Server
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendGprsDat
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttPro
</UL>

<P><STRONG><a name="[178]"></a>MqttGetRegData</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, mqtt.o(i.MqttGetRegData))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = MqttGetRegData &rArr; MqttSetRepBuf &rArr; OtherSetRegValToBuf &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttSetRepBuf
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttSendRegData
</UL>

<P><STRONG><a name="[17a]"></a>MqttHistoryRep</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, mqtt.o(i.MqttHistoryRep))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MqttHistoryRep &rArr; SaveHistoryRep &rArr; WriteHistory &rArr; W25Q_Write &rArr; W25Q_Erase_Sector &rArr; W25Q_Wait_Busy &rArr; W25Q_ReadSR &rArr; Spi1ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveHistoryRep
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadHistroyRep
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRegValToBuf
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttSendRegData
</UL>

<P><STRONG><a name="[116]"></a>MqttOfflineToSaveRegDat</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, mqtt.o(i.MqttOfflineToSaveRegDat))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = MqttOfflineToSaveRegDat &rArr; SaveHistoryRep &rArr; WriteHistory &rArr; W25Q_Write &rArr; W25Q_Erase_Sector &rArr; W25Q_Wait_Busy &rArr; W25Q_ReadSR &rArr; Spi1ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSecCnt
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveHistoryRep
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetRunning
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsFun
</UL>

<P><STRONG><a name="[17e]"></a>MqttPingReq</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, mqtt.o(i.MqttPingReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MqttPingReq &rArr; UipClient2Server &rArr; UdpSendData &rArr;  uip_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UipClient2Server
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendGprsDat
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_pingreq
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttPro
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMQTT_Tim
</UL>

<P><STRONG><a name="[118]"></a>MqttPro</STRONG> (Thumb, 704 bytes, Stack size 24 bytes, mqtt.o(i.MqttPro))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = MqttPro &rArr; MQTT_ClientString &rArr; AnalyJson &rArr; AnalyJsonFromCould &rArr; cJSON_Parse &rArr; cJSON_ParseWithOpts &rArr; parse_value &rArr; parse_number &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDogFeed
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSecCnt
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMQTT_Tim
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttSubscribe
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttSendRegData
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttPingReq
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttDisConnect
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttConnect
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_ClientString
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetRunning
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsFun
</UL>

<P><STRONG><a name="[182]"></a>MqttPublish</STRONG> (Thumb, 214 bytes, Stack size 56 bytes, mqtt.o(i.MqttPublish))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = MqttPublish &rArr; MQTTSerialize_publish &rArr; MQTTSerialize_publishLength &rArr; MQTTstrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UipClient2Server
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendGprsDat
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S282_Log
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMqttConnectData
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttSendRegData
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttSendDOResp
</UL>

<P><STRONG><a name="[183]"></a>MqttRepAlarmFlag</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, mqttcouldpub.o(i.MqttRepAlarmFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MqttRepAlarmFlag &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttSetRepBuf
</UL>

<P><STRONG><a name="[7a]"></a>MqttSendDOResp</STRONG> (Thumb, 220 bytes, Stack size 56 bytes, mqtt.o(i.MqttSendDOResp))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = MqttSendDOResp &rArr; MqttPublish &rArr; MQTTSerialize_publish &rArr; MQTTSerialize_publishLength &rArr; MQTTstrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWyunSendResp
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWyunSendDOResp
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AliyunSendDOResp
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttPublish
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyJsonFromCould
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyJson
</UL>

<P><STRONG><a name="[17f]"></a>MqttSendRegData</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, mqtt.o(i.MqttSendRegData))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = MqttSendRegData &rArr; MqttPublish &rArr; MQTTSerialize_publish &rArr; MQTTSerialize_publishLength &rArr; MQTTstrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveUserInfo
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMs
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDogFeed
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSecCnt
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRegDatToHW
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRegDatToAli
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttPublish
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttHistoryRep
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttGetRegData
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttPro
</UL>

<P><STRONG><a name="[79]"></a>MqttSetDOToWT2</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, mqtt.o(i.MqttSetDOToWT2))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = MqttSetDOToWT2 &rArr; DownLoad2TerminalWT2 &rArr; SendLoraData &rArr; JudgeDevSendTim &rArr; LoraPro &rArr;  SendLoraData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownLoad2TerminalWT2
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyJsonFromCould
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyJson
</UL>

<P><STRONG><a name="[179]"></a>MqttSetRepBuf</STRONG> (Thumb, 398 bytes, Stack size 40 bytes, mqttcouldpub.o(i.MqttSetRepBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MqttSetRepBuf &rArr; OtherSetRegValToBuf &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDevOnlineIndex
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OtherSetRegValToBuf
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttRepAlarmFlag
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRegValToBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRegDatToHW
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRegDatToAli
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttGetRegData
</UL>

<P><STRONG><a name="[180]"></a>MqttSubscribe</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, mqtt.o(i.MqttSubscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = MqttSubscribe &rArr; UipClient2Server &rArr; UdpSendData &rArr;  uip_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UipClient2Server
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendGprsDat
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMqttConnectData
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttPro
</UL>

<P><STRONG><a name="[4]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32e10x_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[187]"></a>NetConnClose</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ethnet.o(i.NetConnClose))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = NetConnClose &rArr; TcpClose &rArr; uip_process &rArr; tcp_appcall &rArr; tcp_server_appcall &rArr; AnalyModBus &rArr; SetDODevBufData &rArr; DownLoad2TerminalWT2 &rArr; SendLoraData &rArr; JudgeDevSendTim &rArr; LoraPro &rArr;  SendLoraData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TcpClose
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetRunning
</UL>

<P><STRONG><a name="[189]"></a>NetPro</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, netlink.o(i.NetPro))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360<LI>Call Chain = NetPro &rArr; GprsRunning &rArr; SmsFun &rArr; GSMAnalySms &rArr; SmsAnaSetCmd &rArr; GSMReplyFunc &rArr; SmsSendDat &rArr; SmsSendGsm &rArr; WaitGsmChar &rArr; delay_1ms &rArr; NorPro &rArr; PcCmdPro &rArr; SetTerminalW2Info &rArr; DownLoad2TerminalWT2 &rArr; SendLoraData &rArr; JudgeDevSendTim &rArr; LoraPro &rArr;  SendLoraData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsRunning
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NorPro
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18b]"></a>NetRunning</STRONG> (Thumb, 1486 bytes, Stack size 16 bytes, ethnet.o(i.NetRunning))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = NetRunning &rArr; MqttPro &rArr; MQTT_ClientString &rArr; AnalyJson &rArr; AnalyJsonFromCould &rArr; cJSON_Parse &rArr; cJSON_ParseWithOpts &rArr; parse_value &rArr; parse_number &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDogFeed
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_udp_new
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_polling
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_connect
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpc_request
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpc_init
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TcpClose
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHLineOut
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetConnClose
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNet
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthGetServerTime
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthFun
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enc28j60Check
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckConn
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyTarIp
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S282_Log
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttPro
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttOfflineToSaveRegDat
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSecCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NorPro
</UL>

<P><STRONG><a name="[191]"></a>NewDevOffline</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, loradealdat.o(i.NewDevOffline))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NewDevOffline
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NorPro
</UL>

<P><STRONG><a name="[18a]"></a>NorPro</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, netlink.o(i.NorPro))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = NorPro &rArr; PcCmdPro &rArr; SetTerminalW2Info &rArr; DownLoad2TerminalWT2 &rArr; SendLoraData &rArr; JudgeDevSendTim &rArr; LoraPro &rArr;  SendLoraData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewDevOffline
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetRunning
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraPro
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDogFeed
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcCmdPro
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetPro
</UL>

<P><STRONG><a name="[110]"></a>NumToStr</STRONG> (Thumb, 116 bytes, Stack size 12 bytes, hardware.o(i.NumToStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = NumToStr
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsConnectServer
</UL>

<P><STRONG><a name="[193]"></a>OpenGSM</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, hardware.o(i.OpenGSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = OpenGSM &rArr; CheckAt &rArr; SendCmd &rArr; delay_1ms &rArr; NorPro &rArr; PcCmdPro &rArr; SetTerminalW2Info &rArr; DownLoad2TerminalWT2 &rArr; SendLoraData &rArr; JudgeDevSendTim &rArr; LoraPro &rArr;  SendLoraData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAt
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S282_Log
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUsart1
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TotalInit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestartGSM
</UL>

<P><STRONG><a name="[186]"></a>OtherSetRegValToBuf</STRONG> (Thumb, 2496 bytes, Stack size 40 bytes, mqttcouldpub.o(i.OtherSetRegValToBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = OtherSetRegValToBuf &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttSetRepBuf
</UL>

<P><STRONG><a name="[192]"></a>PcCmdPro</STRONG> (Thumb, 1346 bytes, Stack size 24 bytes, dealdat.o(i.PcCmdPro))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120<LI>Call Chain = PcCmdPro &rArr; SetTerminalW2Info &rArr; DownLoad2TerminalWT2 &rArr; SendLoraData &rArr; JudgeDevSendTim &rArr; LoraPro &rArr;  SendLoraData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysInfoDef
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendString
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveUserInfo
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutInUart0
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLocalIP
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTerminalW2Info
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysTimCnt
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevInfoInit
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelDevWT2Config
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugSysInfo
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompStr
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearHistory
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTerminalW2Info
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTerminalW1Info
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDeviceTime
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDevicePwd
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDevicePara
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReplySetOK
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReplySetErr
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReplyDeviceTim
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNewDev
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTerminalRegData
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDevIndex
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAlarmHistory
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDevUId
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NorPro
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32e10x_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[19d]"></a>PrintNewDev</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, dealdat.o(i.PrintNewDev))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PrintNewDev &rArr; SendString &rArr; PutInUart0 &rArr; WatchDogFeed
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendString
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcCmdPro
</UL>

<P><STRONG><a name="[f8]"></a>PutInUart0</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, hardware.o(i.PutInUart0))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PutInUart0 &rArr; WatchDogFeed
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDogFeed
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_enable
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendString
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAlarmHistory
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcCmdPro
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[e2]"></a>PutInUart1</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, hardware.o(i.PutInUart1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PutInUart1 &rArr; WatchDogFeed
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDogFeed
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_enable
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsSendGsm
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteComm
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHexAsAsc
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendGprsDat
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMReadSms
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMDelSms
</UL>

<P><STRONG><a name="[e8]"></a>PutModuleVer</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, gsm234g.o(i.PutModuleVer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PutModuleVer &rArr; S282_Log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S282_Log
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMInit
</UL>

<P><STRONG><a name="[19f]"></a>RTCInit</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, rtc.o(i.RTCInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = RTCInit &rArr; RTC_Set &rArr; RTCTimeToSeconds
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_register_sync_wait
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_prescaler_set
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_lwoff_wait
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_interrupt_enable
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_configuration_mode_exit
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_configuration_mode_enter
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_rtc_clock_config
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_osci_stab_wait
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_all_reset_flag_clear
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_backup_write_enable
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_backup_write_disable
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkp_deinit
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkp_data_write
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkp_data_read
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_osci_on
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TotalInit
</UL>

<P><STRONG><a name="[1b5]"></a>RTCTimeToSeconds</STRONG> (Thumb, 258 bytes, Stack size 36 bytes, rtc.o(i.RTCTimeToSeconds))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RTCTimeToSeconds
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
</UL>

<P><STRONG><a name="[1af]"></a>RTC_Get</STRONG> (Thumb, 306 bytes, Stack size 24 bytes, rtc.o(i.RTC_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = RTC_Get &rArr; RTC_Get_Week
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_counter_get
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get_Week
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDeviceTime
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsAnaSetCmd
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCInit
</UL>

<P><STRONG><a name="[1b2]"></a>RTC_Get_Week</STRONG> (Thumb, 116 bytes, Stack size 20 bytes, rtc.o(i.RTC_Get_Week))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RTC_Get_Week
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
</UL>

<P><STRONG><a name="[10]"></a>RTC_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, rtc.o(i.RTC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = RTC_IRQHandler &rArr; RTC_Get &rArr; RTC_Get_Week
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_lwoff_wait
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_interrupt_flag_clear
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_flag_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[1ab]"></a>RTC_Set</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, rtc.o(i.RTC_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = RTC_Set &rArr; RTCTimeToSeconds
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_lwoff_wait
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_counter_set
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_backup_write_enable
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_backup_write_disable
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCTimeToSeconds
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDeviceTime
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsAnaSetCmd
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUtcTime
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCInit
</UL>

<P><STRONG><a name="[1b7]"></a>ReadConfig</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, config_interface.o(i.ReadConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ReadConfig &rArr; W25Q_Read &rArr; Spi1ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fmc_ReadToFlash
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveUserInfo
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveSysInfo
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveDevWT2Config
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSysInfo
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDevWT2Config
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadUserInfo
</UL>

<P><STRONG><a name="[b6]"></a>ReadDevWT2Config</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, config.o(i.ReadDevWT2Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ReadDevWT2Config &rArr; ReadConfig &rArr; W25Q_Read &rArr; Spi1ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevInfoInit
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTerminalW2Info
</UL>

<P><STRONG><a name="[1b8]"></a>ReadHistory</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, config_interface.o(i.ReadHistory))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ReadHistory &rArr; W25Q_Read &rArr; Spi1ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Read
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadHistroy
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadHistroyRep
</UL>

<P><STRONG><a name="[f6]"></a>ReadHistroy</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, config.o(i.ReadHistroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ReadHistroy &rArr; ReadHistory &rArr; W25Q_Read &rArr; Spi1ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadHistory
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAlarmHistory
</UL>

<P><STRONG><a name="[17b]"></a>ReadHistroyRep</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, config.o(i.ReadHistroyRep))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ReadHistroyRep &rArr; ReadHistory &rArr; W25Q_Read &rArr; Spi1ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadHistory
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttHistoryRep
</UL>

<P><STRONG><a name="[a5]"></a>ReadSysInfo</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, config.o(i.ReadSysInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ReadSysInfo &rArr; ReadConfig &rArr; W25Q_Read &rArr; Spi1ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChekPwd
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDevicePara
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInfoInit
</UL>

<P><STRONG><a name="[1b9]"></a>ReadUserInfo</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, config.o(i.ReadUserInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ReadUserInfo &rArr; ReadConfig &rArr; W25Q_Read &rArr; Spi1ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInfoInit
</UL>

<P><STRONG><a name="[196]"></a>ReplyDeviceTim</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, dealdat.o(i.ReplyDeviceTim))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ReplyDeviceTim &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcCmdPro
</UL>

<P><STRONG><a name="[87]"></a>ReplyModBus</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, modbus.o(i.ReplyModBus))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ReplyModBus &rArr; UipClient2Server &rArr; UdpSendData &rArr;  uip_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UipClient2Server
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendGprsDat
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UipServerAck
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyModBus
</UL>

<P><STRONG><a name="[194]"></a>ReplySetErr</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dealdat.o(i.ReplySetErr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ReplySetErr &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTerminalW2Info
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTerminalW1Info
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDevicePwd
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDevicePara
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcCmdPro
</UL>

<P><STRONG><a name="[195]"></a>ReplySetOK</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dealdat.o(i.ReplySetOK))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ReplySetOK &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTerminalW2Info
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTerminalW1Info
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDevicePwd
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDevicePara
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcCmdPro
</UL>

<P><STRONG><a name="[115]"></a>RestartGSM</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, hardware.o(i.RestartGSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = RestartGSM &rArr; GSMInit &rArr; GSMSetGprs &rArr; SendCmd &rArr; delay_1ms &rArr; NorPro &rArr; PcCmdPro &rArr; SetTerminalW2Info &rArr; DownLoad2TerminalWT2 &rArr; SendLoraData &rArr; JudgeDevSendTim &rArr; LoraPro &rArr;  SendLoraData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMInit
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenGSM
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseGSM
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsRunning
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsFun
</UL>

<P><STRONG><a name="[76]"></a>S282_Log</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hardware.o(i.S282_Log))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = S282_Log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetRunning
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthGetServerTime
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthFun
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enc28j60Check
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyTarIp
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsSendGsm
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutModuleVer
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGsmBasic
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMInit
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendGprsDat
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsConnectServer
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMGetReg
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMAnalySms
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyModBus
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsGetServerTime
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsFun
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenGSM
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyJsonFromCould
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyJson
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttPublish
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_ClientString
</UL>

<P><STRONG><a name="[d0]"></a>S282_LogInt</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, hardware.o(i.S282_LogInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = S282_LogInt &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthFun
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsFun
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_appcall
</UL>

<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32e10x_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[152]"></a>SX127X_Current_RSSI</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sx127x_drive.o(i.SX127X_Current_RSSI))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SX127X_Current_RSSI &rArr; SX127X_Read &rArr; SX127X_ReadBuffer &rArr; Spi1ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraDatPro
</UL>

<P><STRONG><a name="[1c1]"></a>SX127X_GetFreq</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, sx127x_drive.o(i.SX127X_GetFreq))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_SetFreq
</UL>

<P><STRONG><a name="[132]"></a>SX127X_Lora_init</STRONG> (Thumb, 266 bytes, Stack size 16 bytes, sx127x_drive.o(i.SX127X_Lora_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SX127X_Lora_init &rArr; SX127X_SetFreq &rArr; SX127X_StartRx &rArr; SX127X_Write &rArr; SX127X_WriteBuffer &rArr; Spi1ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_Write
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_SetFreq
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_Reset
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_Read
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_PoutSet
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLora
</UL>

<P><STRONG><a name="[1bd]"></a>SX127X_PoutSet</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, sx127x_drive.o(i.SX127X_PoutSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SX127X_PoutSet &rArr; SX127X_StandbyMode &rArr; SX127X_Write &rArr; SX127X_WriteBuffer &rArr; Spi1ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_Write
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_StandbyMode
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_Lora_init
</UL>

<P><STRONG><a name="[14f]"></a>SX127X_Read</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, sx127x_drive.o(i.SX127X_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SX127X_Read &rArr; SX127X_ReadBuffer &rArr; Spi1ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraDatPro
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_SetFreq
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_RxPacket
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_PoutSet
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_Lora_init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_Current_RSSI
</UL>

<P><STRONG><a name="[1bf]"></a>SX127X_ReadBuffer</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, sx127x_hal.o(i.SX127X_ReadBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SX127X_ReadBuffer &rArr; Spi1ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi1ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_ReadFifo
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_Read
</UL>

<P><STRONG><a name="[1c0]"></a>SX127X_ReadFifo</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, sx127x_drive.o(i.SX127X_ReadFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SX127X_ReadFifo &rArr; SX127X_ReadBuffer &rArr; Spi1ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_RxPacket
</UL>

<P><STRONG><a name="[1bb]"></a>SX127X_Reset</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, sx127x_drive.o(i.SX127X_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SX127X_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_Lora_init
</UL>

<P><STRONG><a name="[151]"></a>SX127X_RxPacket</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, sx127x_drive.o(i.SX127X_RxPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SX127X_RxPacket &rArr; SX127X_Write &rArr; SX127X_WriteBuffer &rArr; Spi1ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_Write
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_ReadFifo
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraDatPro
</UL>

<P><STRONG><a name="[1bc]"></a>SX127X_SetFreq</STRONG> (Thumb, 172 bytes, Stack size 48 bytes, sx127x_drive.o(i.SX127X_SetFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SX127X_SetFreq &rArr; SX127X_StartRx &rArr; SX127X_Write &rArr; SX127X_WriteBuffer &rArr; Spi1ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_Write
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_StartRx
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_StandbyMode
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_Read
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_GetFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetWorkFreq
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_Lora_init
</UL>

<P><STRONG><a name="[1be]"></a>SX127X_StandbyMode</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sx127x_drive.o(i.SX127X_StandbyMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SX127X_StandbyMode &rArr; SX127X_Write &rArr; SX127X_WriteBuffer &rArr; Spi1ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_SetFreq
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_PoutSet
</UL>

<P><STRONG><a name="[133]"></a>SX127X_StartRx</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, sx127x_drive.o(i.SX127X_StartRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SX127X_StartRx &rArr; SX127X_Write &rArr; SX127X_WriteBuffer &rArr; Spi1ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraDatPro
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLora
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_SetFreq
</UL>

<P><STRONG><a name="[1c2]"></a>SX127X_TxPacket</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, sx127x_drive.o(i.SX127X_TxPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SX127X_TxPacket &rArr; SX127X_Write &rArr; SX127X_WriteBuffer &rArr; Spi1ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_WriteBuffer
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendLoraDatPack
</UL>

<P><STRONG><a name="[150]"></a>SX127X_Write</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, sx127x_drive.o(i.SX127X_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SX127X_Write &rArr; SX127X_WriteBuffer &rArr; Spi1ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraDatPro
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_TxPacket
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_StartRx
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_StandbyMode
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_SetFreq
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_RxPacket
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_PoutSet
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_Lora_init
</UL>

<P><STRONG><a name="[1c3]"></a>SX127X_WriteBuffer</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, sx127x_hal.o(i.SX127X_WriteBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SX127X_WriteBuffer &rArr; Spi1ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi1ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_Write
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_TxPacket
</UL>

<P><STRONG><a name="[1c4]"></a>SaveDevWT2Config</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, config.o(i.SaveDevWT2Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SaveDevWT2Config &rArr; WriteConfig &rArr; W25Q_Write &rArr; W25Q_Erase_Sector &rArr; W25Q_Wait_Busy &rArr; W25Q_ReadSR &rArr; Spi1ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMs
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteConfig
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTerminalW2Info
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDevInfoDef
</UL>

<P><STRONG><a name="[1c5]"></a>SaveHistory</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, config.o(i.SaveHistory))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SaveHistory &rArr; WriteHistory &rArr; W25Q_Write &rArr; W25Q_Erase_Sector &rArr; W25Q_Wait_Busy &rArr; W25Q_ReadSR &rArr; Spi1ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteHistory
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToHistory
</UL>

<P><STRONG><a name="[17d]"></a>SaveHistoryRep</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, config.o(i.SaveHistoryRep))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SaveHistoryRep &rArr; WriteHistory &rArr; W25Q_Write &rArr; W25Q_Erase_Sector &rArr; W25Q_Wait_Busy &rArr; W25Q_ReadSR &rArr; Spi1ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteHistory
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttOfflineToSaveRegDat
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttHistoryRep
</UL>

<P><STRONG><a name="[1c7]"></a>SaveIntData</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, dealdat.o(i.SaveIntData))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SaveIntData &rArr; CompStr
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompStr
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCopyNum
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDevicePara
</UL>

<P><STRONG><a name="[1c9]"></a>SaveStrData</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, dealdat.o(i.SaveStrData))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SaveStrData &rArr; CompStr
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompStr
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCopyStr
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDevicePara
</UL>

<P><STRONG><a name="[82]"></a>SaveSysInfo</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, config.o(i.SaveSysInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SaveSysInfo &rArr; WriteConfig &rArr; W25Q_Write &rArr; W25Q_Erase_Sector &rArr; W25Q_Wait_Busy &rArr; W25Q_ReadSR &rArr; Spi1ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMs
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteConfig
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysInfoDef
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDevicePwd
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDevicePara
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsAnaSetCmd
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyModBus
</UL>

<P><STRONG><a name="[154]"></a>SaveTempDev</STRONG> (Thumb, 266 bytes, Stack size 24 bytes, loradealdat.o(i.SaveTempDev))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SaveTempDev &rArr; CheckTempDev &rArr; GetTempDevPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTempDev
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraPro
</UL>

<P><STRONG><a name="[159]"></a>SaveToHistory</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, loradealdat.o(i.SaveToHistory))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SaveToHistory &rArr; SaveHistory &rArr; WriteHistory &rArr; W25Q_Write &rArr; W25Q_Erase_Sector &rArr; W25Q_Wait_Busy &rArr; W25Q_ReadSR &rArr; Spi1ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveHistory
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraPro
</UL>

<P><STRONG><a name="[a8]"></a>SaveUserInfo</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, config.o(i.SaveUserInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SaveUserInfo &rArr; WriteConfig &rArr; W25Q_Write &rArr; W25Q_Erase_Sector &rArr; W25Q_Wait_Busy &rArr; W25Q_ReadSR &rArr; Spi1ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteConfig
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsRunning
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearHistory
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TotalInit
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcCmdPro
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsAnaSetCmd
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMAnalySms
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUserInfoDef
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttSendRegData
</UL>

<P><STRONG><a name="[94]"></a>SendCmd</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, gsm234g.o(i.SendCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = SendCmd &rArr; delay_1ms &rArr; NorPro &rArr; PcCmdPro &rArr; SetTerminalW2Info &rArr; DownLoad2TerminalWT2 &rArr; SendLoraData &rArr; JudgeDevSendTim &rArr; LoraPro &rArr;  SendLoraData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteComm
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGsmBasic
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMInit
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAt
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsDisConnect
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsDisConRemote
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsConnectServer
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMSetGprs
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMGetReg
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMGetCsq
</UL>

<P><STRONG><a name="[ce]"></a>SendEthWithReg</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, ethnet.o(i.SendEthWithReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SendEthWithReg &rArr; UipClient2Server &rArr; UdpSendData &rArr;  uip_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UipClient2Server
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSecCnt
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthFun
</UL>

<P><STRONG><a name="[117]"></a>SendGprsDat</STRONG> (Thumb, 336 bytes, Stack size 32 bytes, gsm234g.o(i.SendGprsDat))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + In Cycle
<LI>Call Chain = SendGprsDat &rArr;  delay_1ms (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutInUart1
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteComm
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S282_Log
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraPro
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendGprsWithReg
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsFun
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReplyModBus
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttSubscribe
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttPublish
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttPingReq
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttDisConnect
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttConnect
</UL>

<P><STRONG><a name="[119]"></a>SendGprsWithReg</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, gprsnet.o(i.SendGprsWithReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SendGprsWithReg &rArr; SendGprsDat &rArr;  delay_1ms (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendGprsDat
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSecCnt
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsFun
</UL>

<P><STRONG><a name="[1cb]"></a>SendHexAsAsc</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, gsm234g.o(i.SendHexAsAsc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SendHexAsAsc &rArr; PutInUart1 &rArr; WatchDogFeed
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutInUart1
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsSendGsm
</UL>

<P><STRONG><a name="[1cc]"></a>SendLoraDatPack</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lora.o(i.SendLoraDatPack))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SendLoraDatPack &rArr; SX127X_TxPacket &rArr; SX127X_Write &rArr; SX127X_WriteBuffer &rArr; Spi1ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_TxPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendLoraPack
</UL>

<P><STRONG><a name="[7e]"></a>SendLoraData</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, loradealdat.o(i.SendLoraData))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = SendLoraData &rArr; JudgeDevSendTim &rArr; LoraPro &rArr;  SendLoraData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMs
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDogFeed
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeDevSendTim
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendLoraPack
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraPro
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownLoad2TerminalWT2
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownLoad2TerminalWT1
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyModBus
</UL>

<P><STRONG><a name="[1cd]"></a>SendLoraPack</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, loradealdat.o(i.SendLoraPack))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SendLoraPack &rArr; SendLoraDatPack &rArr; SX127X_TxPacket &rArr; SX127X_Write &rArr; SX127X_WriteBuffer &rArr; Spi1ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendLoraDatPack
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendLoraData
</UL>

<P><STRONG><a name="[11c]"></a>SendRestartMsg</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, smsinstruct.o(i.SendRestartMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 1240<LI>Call Chain = SendRestartMsg &rArr; SmsSendDat &rArr; SmsSendGsm &rArr; WaitGsmChar &rArr; delay_1ms &rArr; NorPro &rArr; PcCmdPro &rArr; SetTerminalW2Info &rArr; DownLoad2TerminalWT2 &rArr; SendLoraData &rArr; JudgeDevSendTim &rArr; LoraPro &rArr;  SendLoraData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyStr
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsSendDat
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsRunning
</UL>

<P><STRONG><a name="[b1]"></a>SendString</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, hardware.o(i.SendString))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SendString &rArr; PutInUart0 &rArr; WatchDogFeed
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutInUart0
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTerminalW2Info
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugSysInfo
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNewDev
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTerminalRegData
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAlarmHistory
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugHistory
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TotalInit
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcCmdPro
</UL>

<P><STRONG><a name="[1d1]"></a>SetCopyIp</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, dealdat.o(i.SetCopyIp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetCopyIp
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDevicePara
</UL>

<P><STRONG><a name="[1c8]"></a>SetCopyNum</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, dealdat.o(i.SetCopyNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetCopyNum
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTerminalW2Info
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveIntData
</UL>

<P><STRONG><a name="[1ca]"></a>SetCopyStr</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, dealdat.o(i.SetCopyStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetCopyStr
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveStrData
</UL>

<P><STRONG><a name="[86]"></a>SetDODevBufData</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, modbus.o(i.SetDODevBufData))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = SetDODevBufData &rArr; DownLoad2TerminalWT2 &rArr; SendLoraData &rArr; JudgeDevSendTim &rArr; LoraPro &rArr;  SendLoraData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownLoad2TerminalWT2
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyModBus
</UL>

<P><STRONG><a name="[1ce]"></a>SetDevInfoDef</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, config.o(i.SetDevInfoDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SetDevInfoDef &rArr; SaveDevWT2Config &rArr; WriteConfig &rArr; W25Q_Write &rArr; W25Q_Erase_Sector &rArr; W25Q_Wait_Busy &rArr; W25Q_ReadSR &rArr; Spi1ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveDevWT2Config
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevInfoParamInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysInfoDef
</UL>

<P><STRONG><a name="[157]"></a>SetDevRegVal</STRONG> (Thumb, 428 bytes, Stack size 20 bytes, loradealdat.o(i.SetDevRegVal))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetDevRegVal
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraPro
</UL>

<P><STRONG><a name="[199]"></a>SetDevicePara</STRONG> (Thumb, 2968 bytes, Stack size 24 bytes, dealdat.o(i.SetDevicePara))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SetDevicePara &rArr; SaveSysInfo &rArr; WriteConfig &rArr; W25Q_Write &rArr; W25Q_Erase_Sector &rArr; W25Q_Wait_Busy &rArr; W25Q_ReadSR &rArr; Spi1ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveSysInfo
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSysInfo
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompStr
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearSysInfo
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOnlyCopyStr
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCopyIp
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveStrData
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveIntData
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReplySetOK
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReplySetErr
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcCmdPro
</UL>

<P><STRONG><a name="[198]"></a>SetDevicePwd</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, dealdat.o(i.SetDevicePwd))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SetDevicePwd &rArr; SaveSysInfo &rArr; WriteConfig &rArr; W25Q_Write &rArr; W25Q_Erase_Sector &rArr; W25Q_Wait_Busy &rArr; W25Q_ReadSR &rArr; Spi1ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveSysInfo
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReplySetOK
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReplySetErr
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcCmdPro
</UL>

<P><STRONG><a name="[197]"></a>SetDeviceTime</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, dealdat.o(i.SetDeviceTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = SetDeviceTime &rArr; RTC_Set &rArr; RTCTimeToSeconds
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcCmdPro
</UL>

<P><STRONG><a name="[200]"></a>SetHistory</STRONG> (Thumb, 148 bytes, Stack size 12 bytes, config.o(i.SetHistory))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetHistory
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteHistory
</UL>

<P><STRONG><a name="[181]"></a>SetMQTT_Tim</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, mqtt.o(i.SetMQTT_Tim))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SetMQTT_Tim &rArr; MqttPingReq &rArr; UipClient2Server &rArr; UdpSendData &rArr;  uip_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSecCnt
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttPingReq
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttPro
</UL>

<P><STRONG><a name="[1d0]"></a>SetOnlyCopyStr</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, dealdat.o(i.SetOnlyCopyStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetOnlyCopyStr
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTerminalW2Info
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDevicePara
</UL>

<P><STRONG><a name="[184]"></a>SetRegDatToAli</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, aliyuniot.o(i.SetRegDatToAli))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SetRegDatToAli &rArr; MqttSetRepBuf &rArr; OtherSetRegValToBuf &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttSetRepBuf
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttSendRegData
</UL>

<P><STRONG><a name="[185]"></a>SetRegDatToHW</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, huaweiiot.o(i.SetRegDatToHW))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SetRegDatToHW &rArr; MqttSetRepBuf &rArr; OtherSetRegValToBuf &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttSetRepBuf
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttSendRegData
</UL>

<P><STRONG><a name="[17c]"></a>SetRegValToBuf</STRONG> (Thumb, 1772 bytes, Stack size 32 bytes, mqttcouldpub.o(i.SetRegValToBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SetRegValToBuf &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttSetRepBuf
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttHistoryRep
</UL>

<P><STRONG><a name="[7f]"></a>SetReplayBuf</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, modbus.o(i.SetReplayBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetReplayBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyModBus
</UL>

<P><STRONG><a name="[81]"></a>SetSysInfoData</STRONG> (Thumb, 252 bytes, Stack size 8 bytes, modbus.o(i.SetSysInfoData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetSysInfoData
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyModBus
</UL>

<P><STRONG><a name="[a1]"></a>SetSysInfoDef</STRONG> (Thumb, 382 bytes, Stack size 8 bytes, config.o(i.SetSysInfoDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SetSysInfoDef &rArr; SetUserInfoDef &rArr; SaveUserInfo &rArr; WriteConfig &rArr; W25Q_Write &rArr; W25Q_Erase_Sector &rArr; W25Q_Wait_Busy &rArr; W25Q_ReadSR &rArr; Spi1ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveSysInfo
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearSysInfo
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUserInfoDef
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDevInfoDef
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRefactory
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcCmdPro
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsAnaSetCmd
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInfoInit
</UL>

<P><STRONG><a name="[19c]"></a>SetTerminalW1Info</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, dealdat.o(i.SetTerminalW1Info))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = SetTerminalW1Info &rArr; DownLoad2TerminalWT1 &rArr; SendLoraData &rArr; JudgeDevSendTim &rArr; LoraPro &rArr;  SendLoraData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownLoad2TerminalWT1
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeTempDevID
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReplySetOK
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReplySetErr
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcCmdPro
</UL>

<P><STRONG><a name="[19b]"></a>SetTerminalW2Info</STRONG> (Thumb, 1162 bytes, Stack size 856 bytes, dealdat.o(i.SetTerminalW2Info))
<BR><BR>[Stack]<UL><LI>Max Depth = 1096<LI>Call Chain = SetTerminalW2Info &rArr; DownLoad2TerminalWT2 &rArr; SendLoraData &rArr; JudgeDevSendTim &rArr; LoraPro &rArr;  SendLoraData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveDevWT2Config
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDevWT2Config
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownLoad2TerminalWT2
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeTempDevID
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOnlyCopyStr
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCopyNum
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReplySetOK
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReplySetErr
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyDevInfo
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareDevInfo
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcCmdPro
</UL>

<P><STRONG><a name="[1d2]"></a>SetUserInfoDef</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, config.o(i.SetUserInfoDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SetUserInfoDef &rArr; SaveUserInfo &rArr; WriteConfig &rArr; W25Q_Write &rArr; W25Q_Erase_Sector &rArr; W25Q_Wait_Busy &rArr; W25Q_ReadSR &rArr; Spi1ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveUserInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysInfoDef
</UL>

<P><STRONG><a name="[d2]"></a>SetUtcTime</STRONG> (Thumb, 168 bytes, Stack size 56 bytes, hardware.o(i.SetUtcTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = SetUtcTime &rArr; RTC_Set &rArr; RTCTimeToSeconds
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyStr
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToNum
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthGetServerTime
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsGetServerTime
</UL>

<P><STRONG><a name="[121]"></a>SetWorkFreq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, loradealdat.o(i.SetWorkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SetWorkFreq &rArr; SX127X_SetFreq &rArr; SX127X_StartRx &rArr; SX127X_Write &rArr; SX127X_WriteBuffer &rArr; Spi1ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_SetFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareCheck
</UL>

<P><STRONG><a name="[f3]"></a>SimAnalysisCmd</STRONG> (Thumb, 242 bytes, Stack size 0 bytes, gsm234g.o(i.SimAnalysisCmd))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMToAnalysisData
</UL>

<P><STRONG><a name="[df]"></a>SmsAnaSetCmd</STRONG> (Thumb, 3992 bytes, Stack size 72 bytes, smsinstruct.o(i.SmsAnaSetCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 1312<LI>Call Chain = SmsAnaSetCmd &rArr; GSMReplyFunc &rArr; SmsSendDat &rArr; SmsSendGsm &rArr; WaitGsmChar &rArr; delay_1ms &rArr; NorPro &rArr; PcCmdPro &rArr; SetTerminalW2Info &rArr; DownLoad2TerminalWT2 &rArr; SendLoraData &rArr; JudgeDevSendTim &rArr; LoraPro &rArr;  SendLoraData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysInfoDef
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveUserInfo
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveSysInfo
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelDevWT2Config
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyStr
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompStr
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToNum
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNetStatus
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNetPriority
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGprsServer
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGprsAPNConfig
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEthServer
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDeviceTim
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDeviceStatus
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDeviceId
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDevCommunicateState
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDataValToStr
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMReplyFunc
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoLineBreak
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsDisConnect
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMAnalySms
</UL>

<P><STRONG><a name="[11d]"></a>SmsFun</STRONG> (Thumb, 400 bytes, Stack size 8 bytes, gprsnet.o(i.SmsFun))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344<LI>Call Chain = SmsFun &rArr; GSMAnalySms &rArr; SmsAnaSetCmd &rArr; GSMReplyFunc &rArr; SmsSendDat &rArr; SmsSendGsm &rArr; WaitGsmChar &rArr; delay_1ms &rArr; NorPro &rArr; PcCmdPro &rArr; SetTerminalW2Info &rArr; DownLoad2TerminalWT2 &rArr; SendLoraData &rArr; JudgeDevSendTim &rArr; LoraPro &rArr;  SendLoraData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDogFeed
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMReadSms
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMGetMsgCap
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMGetCsq
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMDelSms
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMAnalySms
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsRunning
</UL>

<P><STRONG><a name="[f0]"></a>SmsSendDat</STRONG> (Thumb, 866 bytes, Stack size 48 bytes, smsinstruct.o(i.SmsSendDat))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232<LI>Call Chain = SmsSendDat &rArr; SmsSendGsm &rArr; WaitGsmChar &rArr; delay_1ms &rArr; NorPro &rArr; PcCmdPro &rArr; SetTerminalW2Info &rArr; DownLoad2TerminalWT2 &rArr; SendLoraData &rArr; JudgeDevSendTim &rArr; LoraPro &rArr;  SendLoraData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsSendGsm
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GbToUniFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMReplyFunc
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRestartMsg
</UL>

<P><STRONG><a name="[1d5]"></a>SmsSendGsm</STRONG> (Thumb, 484 bytes, Stack size 32 bytes, smsinstruct.o(i.SmsSendGsm))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = SmsSendGsm &rArr; WaitGsmChar &rArr; delay_1ms &rArr; NorPro &rArr; PcCmdPro &rArr; SetTerminalW2Info &rArr; DownLoad2TerminalWT2 &rArr; SendLoraData &rArr; JudgeDevSendTim &rArr; LoraPro &rArr;  SendLoraData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutInUart1
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteComm
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitGsmChar
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHexAsAsc
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMRecOK
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S282_Log
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsSendDat
</UL>

<P><STRONG><a name="[1d7]"></a>Spi1Init</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, spi.o(i.Spi1Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Spi1Init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi1ReadWriteByte
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_enable
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_crc_polynomial_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Init
</UL>

<P><STRONG><a name="[c7]"></a>Spi1ReadWriteByte</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, spi.o(i.Spi1ReadWriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Spi1ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_flag_get
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_data_transmit
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_data_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_WriteBuffer
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_ReadBuffer
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Write_Op
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Write_Buf
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Reset
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Read_Op
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Read_Buf
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi1Init
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Write
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Erase_Sector
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Erase_Chip
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Read
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_ReadSR
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_ReadID
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Write_Enable
</UL>

<P><STRONG><a name="[1de]"></a>SpiAsFlash</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, spi.o(i.SpiAsFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SpiAsFlash
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMs
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_enable
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Write
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Erase_Sector
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Read
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_ReadID
</UL>

<P><STRONG><a name="[1e0]"></a>SpiAsNet</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, spi.o(i.SpiAsNet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SpiAsNet
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_enable
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Write
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Erase_Sector
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Read
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_ReadID
</UL>

<P><STRONG><a name="[9a]"></a>SpiClose</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi.o(i.SpiClose))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SpiClose
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPower
</UL>

<P><STRONG><a name="[1d3]"></a>StrToNum</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, hardware.o(i.StrToNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = StrToNum
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsAnaSetCmd
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUtcTime
</UL>

<P><STRONG><a name="[1e1]"></a>SysInfoInit</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, config.o(i.SysInfoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SysInfoInit &rArr; SetSysInfoDef &rArr; SetUserInfoDef &rArr; SaveUserInfo &rArr; WriteConfig &rArr; W25Q_Write &rArr; W25Q_Erase_Sector &rArr; W25Q_Wait_Busy &rArr; W25Q_ReadSR &rArr; Spi1ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysInfoDef
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSysInfo
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevInfoInit
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseChipOrSector
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadUserInfo
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHistoyrCodeLen
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TotalInit
</UL>

<P><STRONG><a name="[c]"></a>SysTick_Handler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, gd32e10x_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_decrement
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>SystemInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, system_gd32e10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit &rArr; system_clock_config
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_vector_table_set
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(.text)
</UL>
<P><STRONG><a name="[29]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, tim1.o(i.TIMER1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_get
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, tim2.o(i.TIMER2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_get
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[188]"></a>TcpClose</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, tapdev.o(i.TcpClose))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = TcpClose &rArr; uip_process &rArr; tcp_appcall &rArr; tcp_server_appcall &rArr; AnalyModBus &rArr; SetDODevBufData &rArr; DownLoad2TerminalWT2 &rArr; SendLoraData &rArr; JudgeDevSendTim &rArr; LoraPro &rArr;  SendLoraData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tapdev_send
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_arp_out
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetRunning
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetConnClose
</UL>

<P><STRONG><a name="[1e9]"></a>TcpSendData</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, tapdev.o(i.TcpSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + In Cycle
<LI>Call Chain = TcpSendData &rArr;  uip_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tapdev_send
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_arp_out
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UipClient2Server
</UL>

<P><STRONG><a name="[1ea]"></a>Tim2Init</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, tim2.o(i.Tim2Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Tim2Init &rArr; timer_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_clear
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_enable
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TotalInit
</UL>

<P><STRONG><a name="[1eb]"></a>TotalInit</STRONG> (Thumb, 220 bytes, Stack size 8 bytes, hardware.o(i.TotalInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = TotalInit &rArr; GSMInit &rArr; GSMSetGprs &rArr; SendCmd &rArr; delay_1ms &rArr; NorPro &rArr; PcCmdPro &rArr; SetTerminalW2Info &rArr; DownLoad2TerminalWT2 &rArr; SendLoraData &rArr; JudgeDevSendTim &rArr; LoraPro &rArr;  SendLoraData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendString
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveUserInfo
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMs
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNet
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMInit
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUsart0
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCInit
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDogInit
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAdc
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInfoInit
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Init
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim2Init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimer1
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenGSM
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNVIC
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGPIO
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChipId
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[32]"></a>USART0_IRQHandler</STRONG> (Thumb, 212 bytes, Stack size 8 bytes, usart.o(i.USART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART0_IRQHandler &rArr; usart_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_get
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_disable
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_transmit
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>USART1_IRQHandler</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, usart.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART1_IRQHandler &rArr; UartToGSM &rArr; GSMToAnalysisData &rArr; GprsAnalysisCmd3GOr4G &rArr; CompStr
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartToGSM
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_get
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_disable
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_transmit
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[1f2]"></a>UartToGSM</STRONG> (Thumb, 336 bytes, Stack size 16 bytes, gsm234g.o(i.UartToGSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = UartToGSM &rArr; GSMToAnalysisData &rArr; GprsAnalysisCmd3GOr4G &rArr; CompStr
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMToAnalysisData
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[1f3]"></a>UdpSendData</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, tapdev.o(i.UdpSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + In Cycle
<LI>Call Chain = UdpSendData &rArr;  uip_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tapdev_send
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_arp_out
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UipClient2Server
</UL>

<P><STRONG><a name="[cd]"></a>UipClient2Server</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, tapdev.o(i.UipClient2Server))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = UipClient2Server &rArr; UdpSendData &rArr;  uip_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8cpy
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdpSendData
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TcpSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraPro
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEthWithReg
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthFun
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReplyModBus
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttSubscribe
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttPublish
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttPingReq
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttDisConnect
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttConnect
</UL>

<P><STRONG><a name="[158]"></a>UipServer2Client</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, tapdev.o(i.UipServer2Client))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UipServer2Client
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraPro
</UL>

<P><STRONG><a name="[1ba]"></a>UipServerAck</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, tapdev.o(i.UipServerAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UipServerAck &rArr; uip_send
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_send
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReplyModBus
</UL>

<P><STRONG><a name="[dd]"></a>UniToGbFunc</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, smsinstruct.o(i.UniToGbFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UniToGbFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMAnalySms
</UL>

<P><STRONG><a name="[8]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32e10x_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e10x.o(RESET)
</UL>
<P><STRONG><a name="[cb]"></a>W25Q_Erase_Chip</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, spi_flah.o(i.W25Q_Erase_Chip))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = W25Q_Erase_Chip &rArr; W25Q_Wait_Busy &rArr; W25Q_ReadSR &rArr; Spi1ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi1ReadWriteByte
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Wait_Busy
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Write_Enable
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Write_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseChipOrSector
</UL>

<P><STRONG><a name="[ca]"></a>W25Q_Erase_Sector</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, spi_flah.o(i.W25Q_Erase_Sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = W25Q_Erase_Sector &rArr; W25Q_Wait_Busy &rArr; W25Q_ReadSR &rArr; Spi1ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi1ReadWriteByte
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiAsNet
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiAsFlash
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Wait_Busy
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Write_Enable
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Write_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Write
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseChipOrSector
</UL>

<P><STRONG><a name="[1ed]"></a>W25Q_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, spi_flah.o(i.W25Q_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = W25Q_Init &rArr; Spi1Init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMs
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi1Init
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_ReadID
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TotalInit
</UL>

<P><STRONG><a name="[108]"></a>W25Q_Read</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, spi_flah.o(i.W25Q_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = W25Q_Read &rArr; Spi1ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi1ReadWriteByte
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiAsNet
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiAsFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteHistory
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadHistory
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadConfig
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHistoyrCodeLen
</UL>

<P><STRONG><a name="[1f9]"></a>W25Q_ReadID</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, spi_flah.o(i.W25Q_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = W25Q_ReadID &rArr; Spi1ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi1ReadWriteByte
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiAsNet
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiAsFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Init
</UL>

<P><STRONG><a name="[1fa]"></a>W25Q_ReadSR</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, spi_flah.o(i.W25Q_ReadSR))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = W25Q_ReadSR &rArr; Spi1ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi1ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Wait_Busy
</UL>

<P><STRONG><a name="[1f7]"></a>W25Q_Wait_Busy</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, spi_flah.o(i.W25Q_Wait_Busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = W25Q_Wait_Busy &rArr; W25Q_ReadSR &rArr; Spi1ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_ReadSR
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Write
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Erase_Sector
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Erase_Chip
</UL>

<P><STRONG><a name="[1fb]"></a>W25Q_Write</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, spi_flah.o(i.W25Q_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = W25Q_Write &rArr; W25Q_Erase_Sector &rArr; W25Q_Wait_Busy &rArr; W25Q_ReadSR &rArr; Spi1ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDogFeed
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi1ReadWriteByte
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiAsNet
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiAsFlash
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Erase_Sector
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Wait_Busy
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Write_Enable
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Write_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteHistory
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteConfig
</UL>

<P><STRONG><a name="[1d6]"></a>WaitGsmChar</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, gsm234g.o(i.WaitGsmChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152<LI>Call Chain = WaitGsmChar &rArr; delay_1ms &rArr; NorPro &rArr; PcCmdPro &rArr; SetTerminalW2Info &rArr; DownLoad2TerminalWT2 &rArr; SendLoraData &rArr; JudgeDevSendTim &rArr; LoraPro &rArr;  SendLoraData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsSendGsm
</UL>

<P><STRONG><a name="[9d]"></a>WatchDogFeed</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, iwdg.o(i.WatchDogFeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WatchDogFeed
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwdgt_counter_reload
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetRunning
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraPro
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPower
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutInUart0
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownLoad2TerminalWT2
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownLoad2TerminalWT1
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NorPro
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthFun
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutInUart1
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttPro
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsDisConnect
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsFun
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsFun
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Write
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeDevSendTim
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendLoraData
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttSendRegData
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_ClientString
</UL>

<P><STRONG><a name="[1ee]"></a>WatchDogInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, iwdg.o(i.WatchDogInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = WatchDogInit &rArr; fwdgt_config
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_osci_on
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwdgt_write_enable
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwdgt_enable
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwdgt_counter_reload
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwdgt_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TotalInit
</UL>

<P><STRONG><a name="[e1]"></a>WriteComm</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gsm234g.o(i.WriteComm))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WriteComm &rArr; PutInUart1 &rArr; WatchDogFeed
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutInUart1
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsSendGsm
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendGprsDat
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMReadSms
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMGetMsgCap
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMDelSms
</UL>

<P><STRONG><a name="[b4]"></a>WriteConfig</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, config_interface.o(i.WriteConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = WriteConfig &rArr; W25Q_Write &rArr; W25Q_Erase_Sector &rArr; W25Q_Wait_Busy &rArr; W25Q_ReadSR &rArr; Spi1ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Write
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fmc_WriteToFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveUserInfo
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveSysInfo
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveDevWT2Config
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelDevWT2Config
</UL>

<P><STRONG><a name="[1c6]"></a>WriteHistory</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, config_interface.o(i.WriteHistory))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = WriteHistory &rArr; W25Q_Write &rArr; W25Q_Erase_Sector &rArr; W25Q_Wait_Busy &rArr; W25Q_ReadSR &rArr; Spi1ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Write
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Read
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetHistory
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveHistoryRep
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveHistory
</UL>

<P><STRONG><a name="[201]"></a>__0printf$8</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[265]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[e9]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraPro
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TotalInit
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcCmdPro
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMInit
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUtcTime
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S282_LogInt
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S282_Log
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteHistory
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadHistory
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttSetDOToWT2
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolv_found
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dhcp
</UL>

<P><STRONG><a name="[203]"></a>__0sprintf$8</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[266]"></a>__1sprintf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)

<P><STRONG><a name="[72]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysInfoDef
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTerminalW2Info
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugSysInfo
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReplySetOK
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReplySetErr
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReplyDeviceTim
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNewDev
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAlarmHistory
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugHistory
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcCmdPro
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsAnaSetCmd
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDevCommunicateState
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMSetGprs
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsGetServerTime
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OtherSetRegValToBuf
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttRepAlarmFlag
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRegValToBuf
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRegDatToHW
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRegDatToAli
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWyunSendResp
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWyunSendDOResp
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AliyunSendDOResp
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttSendDOResp
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttHistoryRep
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttGetRegData
</UL>

<P><STRONG><a name="[20f]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[fc]"></a>__hardfp_pow</STRONG> (Thumb, 3044 bytes, Stack size 184 bytes, pow.o(i.__hardfp_pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDataValToStr
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
</UL>

<P><STRONG><a name="[20c]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[206]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[204]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[20a]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[207]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_overflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[20b]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[267]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[268]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[269]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[205]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[70]"></a>adc_calibration_enable</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, gd32e10x_adc.o(i.adc_calibration_enable))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAdc
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_EXTI_Init
</UL>

<P><STRONG><a name="[12a]"></a>adc_channel_length_config</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, gd32e10x_adc.o(i.adc_channel_length_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = adc_channel_length_config
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAdc
</UL>

<P><STRONG><a name="[129]"></a>adc_data_alignment_config</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32e10x_adc.o(i.adc_data_alignment_config))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAdc
</UL>

<P><STRONG><a name="[123]"></a>adc_deinit</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, gd32e10x_adc.o(i.adc_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adc_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAdc
</UL>

<P><STRONG><a name="[12c]"></a>adc_enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32e10x_adc.o(i.adc_enable))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAdc
</UL>

<P><STRONG><a name="[128]"></a>adc_external_trigger_config</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, gd32e10x_adc.o(i.adc_external_trigger_config))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAdc
</UL>

<P><STRONG><a name="[127]"></a>adc_external_trigger_source_config</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, gd32e10x_adc.o(i.adc_external_trigger_source_config))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAdc
</UL>

<P><STRONG><a name="[6f]"></a>adc_interrupt_enable</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, gd32e10x_adc.o(i.adc_interrupt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_EXTI_Init
</UL>

<P><STRONG><a name="[6d]"></a>adc_interrupt_flag_clear</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32e10x_adc.o(i.adc_interrupt_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_EXTI_Init
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_1_IRQHandler
</UL>

<P><STRONG><a name="[6b]"></a>adc_interrupt_flag_get</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, gd32e10x_adc.o(i.adc_interrupt_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adc_interrupt_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_1_IRQHandler
</UL>

<P><STRONG><a name="[125]"></a>adc_mode_config</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32e10x_adc.o(i.adc_mode_config))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAdc
</UL>

<P><STRONG><a name="[12b]"></a>adc_regular_channel_config</STRONG> (Thumb, 172 bytes, Stack size 20 bytes, gd32e10x_adc.o(i.adc_regular_channel_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = adc_regular_channel_config
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAdc
</UL>

<P><STRONG><a name="[6c]"></a>adc_regular_data_read</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32e10x_adc.o(i.adc_regular_data_read))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_1_IRQHandler
</UL>

<P><STRONG><a name="[12d]"></a>adc_software_trigger_enable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gd32e10x_adc.o(i.adc_software_trigger_enable))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAdc
</UL>

<P><STRONG><a name="[126]"></a>adc_special_function_config</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, gd32e10x_adc.o(i.adc_special_function_config))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAdc
</UL>

<P><STRONG><a name="[1a0]"></a>bkp_data_read</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, gd32e10x_bkp.o(i.bkp_data_read))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCInit
</UL>

<P><STRONG><a name="[1ad]"></a>bkp_data_write</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, gd32e10x_bkp.o(i.bkp_data_write))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCInit
</UL>

<P><STRONG><a name="[1a2]"></a>bkp_deinit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gd32e10x_bkp.o(i.bkp_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bkp_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_bkp_reset_enable
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_bkp_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCInit
</UL>

<P><STRONG><a name="[50]"></a>bufchar</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, mqttpacket.o(i.bufchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bufchar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mqttpacket.o(i.MQTTPacket_decodeBuf)
</UL>
<P><STRONG><a name="[7b]"></a>cJSON_Delete</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, cjson.o(i.cJSON_Delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = cJSON_Delete &rArr;  cJSON_Delete (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyJsonFromCould
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithOpts
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyJson
</UL>

<P><STRONG><a name="[78]"></a>cJSON_GetArrayItem</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cjson.o(i.cJSON_GetArrayItem))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyJson
</UL>

<P><STRONG><a name="[77]"></a>cJSON_GetObjectItem</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, cjson.o(i.cJSON_GetObjectItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cJSON_GetObjectItem &rArr; cJSON_strcasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_strcasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyJsonFromCould
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyJson
</UL>

<P><STRONG><a name="[75]"></a>cJSON_Parse</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cjson.o(i.cJSON_Parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = cJSON_Parse &rArr; cJSON_ParseWithOpts &rArr; parse_value &rArr; parse_number &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithOpts
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyJsonFromCould
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyJson
</UL>

<P><STRONG><a name="[218]"></a>cJSON_ParseWithOpts</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, cjson.o(i.cJSON_ParseWithOpts))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = cJSON_ParseWithOpts &rArr; parse_value &rArr; parse_number &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Parse
</UL>

<P><STRONG><a name="[243]"></a>clock_time</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, clock-arch.o(i.clock_time))
<BR><BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_set
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_expired
</UL>

<P><STRONG><a name="[a2]"></a>delayMs</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, systick.o(i.delayMs))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRefactory
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveSysInfo
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveDevWT2Config
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownLoad2TerminalWT2
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownLoad2TerminalWT1
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevInfoInit
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TotalInit
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Reset
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthGetServerTime
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsDisConnect
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsGetServerTime
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiAsFlash
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAdc
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendLoraData
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Init
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttSendRegData
</UL>

<P><STRONG><a name="[eb]"></a>delay_1ms</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, systick.o(i.delay_1ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = delay_1ms &rArr; NorPro &rArr; PcCmdPro &rArr; SetTerminalW2Info &rArr; DownLoad2TerminalWT2 &rArr; SendLoraData &rArr; JudgeDevSendTim &rArr; LoraPro &rArr;  SendLoraData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NorPro
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsSendGsm
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitGsmChar
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMRecOK
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMInit
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendGprsDat
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenGSM
</UL>

<P><STRONG><a name="[1e2]"></a>delay_decrement</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, systick.o(i.delay_decrement))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[21e]"></a>dhcpc_appcall</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, dhcpc.o(i.dhcpc_appcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = dhcpc_appcall &rArr; handle_dhcp &rArr; send_request &rArr; uip_send
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dhcp
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_appcall
</UL>

<P><STRONG><a name="[220]"></a>dhcpc_configured</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, dhcpc.o(i.dhcpc_configured))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = dhcpc_configured &rArr; resolv_conf &rArr; uip_udp_new
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolv_conf
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dhcp
</UL>

<P><STRONG><a name="[18e]"></a>dhcpc_init</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, dhcpc.o(i.dhcpc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = dhcpc_init &rArr; uip_udp_new
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_udp_new
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetRunning
</UL>

<P><STRONG><a name="[18f]"></a>dhcpc_request</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, dhcpc.o(i.dhcpc_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dhcpc_request
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetRunning
</UL>

<P><STRONG><a name="[209]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[d5]"></a>fmc_flag_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gd32e10x_fmc.o(i.fmc_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fmc_WriteToFlash
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fmc_ErasePages
</UL>

<P><STRONG><a name="[d7]"></a>fmc_lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32e10x_fmc.o(i.fmc_lock))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fmc_WriteToFlash
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fmc_ErasePages
</UL>

<P><STRONG><a name="[d6]"></a>fmc_page_erase</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, gd32e10x_fmc.o(i.fmc_page_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fmc_page_erase &rArr; fmc_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_ready_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fmc_ErasePages
</UL>

<P><STRONG><a name="[d4]"></a>fmc_unlock</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32e10x_fmc.o(i.fmc_unlock))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fmc_WriteToFlash
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fmc_ErasePages
</UL>

<P><STRONG><a name="[db]"></a>fmc_word_program</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, gd32e10x_fmc.o(i.fmc_word_program))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fmc_word_program &rArr; fmc_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_ready_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fmc_WriteToFlash
</UL>

<P><STRONG><a name="[51]"></a>fputc</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, usart.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fputc &rArr; PutInUart0 &rArr; WatchDogFeed
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutInUart0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[2]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTerminalW2Info
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugSysInfo
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNewDev
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAlarmHistory
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugHistory
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEthWithReg
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUtcTime
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsConnectServer
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMSetGprs
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendGprsWithReg
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsGetServerTime
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteHistory
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadHistory
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyJsonFromCould
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRegDatToHW
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWyunSendDOResp
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyJson
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttSubscribe
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttSendRegData
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttSendDOResp
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttPublish
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttHistoryRep
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttGetRegData
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttConnect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cjson.o(.data)
</UL>
<P><STRONG><a name="[1fe]"></a>fwdgt_config</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, gd32e10x_fwdgt.o(i.fwdgt_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = fwdgt_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDogInit
</UL>

<P><STRONG><a name="[1fc]"></a>fwdgt_counter_reload</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32e10x_fwdgt.o(i.fwdgt_counter_reload))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDogFeed
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDogInit
</UL>

<P><STRONG><a name="[1ff]"></a>fwdgt_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32e10x_fwdgt.o(i.fwdgt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDogInit
</UL>

<P><STRONG><a name="[1fd]"></a>fwdgt_write_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32e10x_fwdgt.o(i.fwdgt_write_enable))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDogInit
</UL>

<P><STRONG><a name="[99]"></a>gpio_bit_reset</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32e10x_gpio.o(i.gpio_bit_reset))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRefactory
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPower
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TotalInit
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_WriteBuffer
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_ReadBuffer
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Write_Op
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Write_Buf
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Reset
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Read_Op
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Read_Buf
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Write
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Erase_Sector
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Erase_Chip
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Read
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_Reset
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_ReadSR
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_ReadID
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Write_Enable
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseGSM
</UL>

<P><STRONG><a name="[9f]"></a>gpio_bit_set</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32e10x_gpio.o(i.gpio_bit_set))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRefactory
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPower
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TotalInit
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_WriteBuffer
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_ReadBuffer
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Write_Op
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Write_Buf
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Reset
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Read_Op
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Read_Buf
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Write
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Erase_Sector
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Erase_Chip
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Read
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_Reset
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_ReadSR
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_ReadID
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Write_Enable
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Init
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenGSM
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGPIO
</UL>

<P><STRONG><a name="[9c]"></a>gpio_init</STRONG> (Thumb, 188 bytes, Stack size 20 bytes, gd32e10x_gpio.o(i.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPower
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUsart1
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUsart0
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi1Init
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLora
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGPIO
</UL>

<P><STRONG><a name="[98]"></a>gpio_input_port_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32e10x_gpio.o(i.gpio_input_port_get))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRefactory
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPower
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugSysInfo
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDeviceStatus
</UL>

<P><STRONG><a name="[8c]"></a>htons</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uip.o(i.htons))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetRunning
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_udp_new
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_polling
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_connect
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyTarIp
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolv_found
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newdata
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_entries
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dhcp
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ipchksum
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upper_layer_chksum
</UL>

<P><STRONG><a name="[155]"></a>isChipId</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, loradealdat.o(i.isChipId))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraPro
</UL>

<P><STRONG><a name="[156]"></a>isDevChipId</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, loradealdat.o(i.isDevChipId))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isDevChipId
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraPro
</UL>

<P><STRONG><a name="[4d]"></a>main</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368<LI>Call Chain = main &rArr; NetPro &rArr; GprsRunning &rArr; SmsFun &rArr; GSMAnalySms &rArr; SmsAnaSetCmd &rArr; GSMReplyFunc &rArr; SmsSendDat &rArr; SmsSendGsm &rArr; WaitGsmChar &rArr; delay_1ms &rArr; NorPro &rArr; PcCmdPro &rArr; SetTerminalW2Info &rArr; DownLoad2TerminalWT2 &rArr; SendLoraData &rArr; JudgeDevSendTim &rArr; LoraPro &rArr;  SendLoraData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_config
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDogFeed
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TotalInit
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcCmdPro
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetPro
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareCheck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[1]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTerminalW2Info
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugSysInfo
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNewDev
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAlarmHistory
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugHistory
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEthWithReg
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUtcTime
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsConnectServer
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMSetGprs
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendGprsWithReg
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsGetServerTime
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteHistory
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadHistory
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyJsonFromCould
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRegDatToHW
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWyunSendDOResp
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyJson
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttSubscribe
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttSendRegData
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttSendDOResp
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttPublish
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttHistoryRep
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttGetRegData
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MqttConnect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cjson.o(.data)
</UL>
<P><STRONG><a name="[136]"></a>nvic_irq_enable</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, gd32e10x_misc.o(i.nvic_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_set
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNVIC
</UL>

<P><STRONG><a name="[135]"></a>nvic_priority_group_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32e10x_misc.o(i.nvic_priority_group_set))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNVIC
</UL>

<P><STRONG><a name="[1e4]"></a>nvic_vector_table_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32e10x_misc.o(i.nvic_vector_table_set))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[1ae]"></a>pmu_backup_write_disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32e10x_pmu.o(i.pmu_backup_write_disable))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCInit
</UL>

<P><STRONG><a name="[1a1]"></a>pmu_backup_write_enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32e10x_pmu.o(i.pmu_backup_write_enable))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCInit
</UL>

<P><STRONG><a name="[1b0]"></a>rcu_all_reset_flag_clear</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32e10x_rcu.o(i.rcu_all_reset_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCInit
</UL>

<P><STRONG><a name="[215]"></a>rcu_bkp_reset_disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32e10x_rcu.o(i.rcu_bkp_reset_disable))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkp_deinit
</UL>

<P><STRONG><a name="[214]"></a>rcu_bkp_reset_enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32e10x_rcu.o(i.rcu_bkp_reset_enable))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkp_deinit
</UL>

<P><STRONG><a name="[252]"></a>rcu_clock_freq_get</STRONG> (Thumb, 352 bytes, Stack size 96 bytes, gd32e10x_rcu.o(i.rcu_clock_freq_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
</UL>

<P><STRONG><a name="[233]"></a>rcu_flag_get</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gd32e10x_rcu.o(i.rcu_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_osci_stab_wait
</UL>

<P><STRONG><a name="[1a3]"></a>rcu_osci_on</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32e10x_rcu.o(i.rcu_osci_on))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCInit
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDogInit
</UL>

<P><STRONG><a name="[1a4]"></a>rcu_osci_stab_wait</STRONG> (Thumb, 342 bytes, Stack size 20 bytes, gd32e10x_rcu.o(i.rcu_osci_stab_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rcu_osci_stab_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCInit
</UL>

<P><STRONG><a name="[124]"></a>rcu_periph_clock_enable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32e10x_rcu.o(i.rcu_periph_clock_enable))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUsart1
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUsart0
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi1Init
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCInit
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAdc
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim2Init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimer1
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGPIO
</UL>

<P><STRONG><a name="[213]"></a>rcu_periph_reset_disable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32e10x_rcu.o(i.rcu_periph_reset_disable))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_deinit
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
</UL>

<P><STRONG><a name="[212]"></a>rcu_periph_reset_enable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32e10x_rcu.o(i.rcu_periph_reset_enable))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_deinit
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
</UL>

<P><STRONG><a name="[1a5]"></a>rcu_rtc_clock_config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32e10x_rcu.o(i.rcu_rtc_clock_config))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCInit
</UL>

<P><STRONG><a name="[15b]"></a>readChar</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mqttpacket.o(i.readChar))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_publish
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_connack
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_suback
</UL>

<P><STRONG><a name="[15f]"></a>readInt</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, mqttpacket.o(i.readInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = readInt
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_publish
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readMQTTLenString
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_suback
</UL>

<P><STRONG><a name="[15e]"></a>readMQTTLenString</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, mqttpacket.o(i.readMQTTLenString))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = readMQTTLenString &rArr; readInt
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readInt
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_publish
</UL>

<P><STRONG><a name="[234]"></a>resolv_appcall</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, resolv.o(i.resolv_appcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = resolv_appcall &rArr; newdata &rArr; resolv_found &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newdata
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_entries
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_appcall
</UL>

<P><STRONG><a name="[8f]"></a>resolv_conf</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, resolv.o(i.resolv_conf))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = resolv_conf &rArr; uip_udp_new
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_udp_new
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyTarIp
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpc_configured
</UL>

<P><STRONG><a name="[21c]"></a>resolv_found</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, resolv.o(i.resolv_found))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = resolv_found &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newdata
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_entries
</UL>

<P><STRONG><a name="[8e]"></a>resolv_getserver</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, resolv.o(i.resolv_getserver))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyTarIp
</UL>

<P><STRONG><a name="[139]"></a>resolv_init</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, resolv.o(i.resolv_init))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNet
</UL>

<P><STRONG><a name="[90]"></a>resolv_query</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, resolv.o(i.resolv_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = resolv_query
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyTarIp
</UL>

<P><STRONG><a name="[1aa]"></a>rtc_configuration_mode_enter</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32e10x_rtc.o(i.rtc_configuration_mode_enter))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_prescaler_set
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_counter_set
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCInit
</UL>

<P><STRONG><a name="[1ac]"></a>rtc_configuration_mode_exit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32e10x_rtc.o(i.rtc_configuration_mode_exit))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_prescaler_set
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_counter_set
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCInit
</UL>

<P><STRONG><a name="[1b1]"></a>rtc_counter_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32e10x_rtc.o(i.rtc_counter_get))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
</UL>

<P><STRONG><a name="[1b6]"></a>rtc_counter_set</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, gd32e10x_rtc.o(i.rtc_counter_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rtc_counter_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_configuration_mode_exit
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_configuration_mode_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
</UL>

<P><STRONG><a name="[1b3]"></a>rtc_flag_get</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32e10x_rtc.o(i.rtc_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[1a8]"></a>rtc_interrupt_enable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32e10x_rtc.o(i.rtc_interrupt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCInit
</UL>

<P><STRONG><a name="[1b4]"></a>rtc_interrupt_flag_clear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32e10x_rtc.o(i.rtc_interrupt_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[1a7]"></a>rtc_lwoff_wait</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32e10x_rtc.o(i.rtc_lwoff_wait))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCInit
</UL>

<P><STRONG><a name="[1a9]"></a>rtc_prescaler_set</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, gd32e10x_rtc.o(i.rtc_prescaler_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rtc_prescaler_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_configuration_mode_exit
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_configuration_mode_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCInit
</UL>

<P><STRONG><a name="[1a6]"></a>rtc_register_sync_wait</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32e10x_rtc.o(i.rtc_register_sync_wait))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCInit
</UL>

<P><STRONG><a name="[1d9]"></a>spi_crc_polynomial_set</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32e10x_spi.o(i.spi_crc_polynomial_set))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi1Init
</UL>

<P><STRONG><a name="[1df]"></a>spi_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32e10x_spi.o(i.spi_disable))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiClose
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiAsNet
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiAsFlash
</UL>

<P><STRONG><a name="[1da]"></a>spi_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32e10x_spi.o(i.spi_enable))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiAsNet
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiAsFlash
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi1Init
</UL>

<P><STRONG><a name="[1dd]"></a>spi_i2s_data_receive</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32e10x_spi.o(i.spi_i2s_data_receive))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi1ReadWriteByte
</UL>

<P><STRONG><a name="[1dc]"></a>spi_i2s_data_transmit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32e10x_spi.o(i.spi_i2s_data_transmit))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi1ReadWriteByte
</UL>

<P><STRONG><a name="[1db]"></a>spi_i2s_flag_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32e10x_spi.o(i.spi_i2s_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi1ReadWriteByte
</UL>

<P><STRONG><a name="[1d8]"></a>spi_init</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, gd32e10x_spi.o(i.spi_init))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiAsNet
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiAsFlash
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi1Init
</UL>

<P><STRONG><a name="[208]"></a>sqrt</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[23b]"></a>str2hex</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, ethnet.o(i.str2hex))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = str2hex
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str2ip
</UL>

<P><STRONG><a name="[8b]"></a>str2ip</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, ethnet.o(i.str2ip))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = str2ip &rArr; str2hex
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str2hex
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyTarIp
</UL>

<P><STRONG><a name="[228]"></a>systick_config</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, systick.o(i.systick_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = systick_config &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c9]"></a>tapdev_init</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, tapdev.o(i.tapdev_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = tapdev_init &rArr; ENC28J60_Init &rArr; ENC28J60_PHY_Write &rArr; ENC28J60_Write &rArr; ENC28J60_Set_Bank &rArr; ENC28J60_Write_Op &rArr; Spi1ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_PHY_Write
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNet
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enc28j60Check
</UL>

<P><STRONG><a name="[23e]"></a>tapdev_read</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, tapdev.o(i.tapdev_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = tapdev_read &rArr; ENC28J60_Packet_Receive &rArr; ENC28J60_PHY_Read &rArr; ENC28J60_Write &rArr; ENC28J60_Set_Bank &rArr; ENC28J60_Write_Op &rArr; Spi1ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Packet_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_polling
</UL>

<P><STRONG><a name="[1e8]"></a>tapdev_send</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tapdev.o(i.tapdev_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = tapdev_send &rArr; ENC28J60_Packet_Send &rArr; ENC28J60_Write &rArr; ENC28J60_Set_Bank &rArr; ENC28J60_Write_Op &rArr; Spi1ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Packet_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_polling
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TcpClose
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdpSendData
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TcpSendData
</UL>

<P><STRONG><a name="[23f]"></a>tcp_appcall</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, uip_appcall.o(i.tcp_appcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = tcp_appcall &rArr; tcp_server_appcall &rArr; AnalyModBus &rArr; SetDODevBufData &rArr; DownLoad2TerminalWT2 &rArr; SendLoraData &rArr; JudgeDevSendTim &rArr; LoraPro &rArr;  SendLoraData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_appcall
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_appcall
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
</UL>

<P><STRONG><a name="[241]"></a>tcp_client_appcall</STRONG> (Thumb, 464 bytes, Stack size 16 bytes, tcp_client.o(i.tcp_client_appcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = tcp_client_appcall &rArr; u8cpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8cpy
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_log
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_send
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_appcall
</UL>

<P><STRONG><a name="[240]"></a>tcp_server_appcall</STRONG> (Thumb, 292 bytes, Stack size 8 bytes, tcp_server.o(i.tcp_server_appcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = tcp_server_appcall &rArr; AnalyModBus &rArr; SetDODevBufData &rArr; DownLoad2TerminalWT2 &rArr; SendLoraData &rArr; JudgeDevSendTim &rArr; LoraPro &rArr;  SendLoraData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S282_LogInt
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyModBus
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_log
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_send
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_appcall
</UL>

<P><STRONG><a name="[13b]"></a>timer_deinit</STRONG> (Thumb, 374 bytes, Stack size 8 bytes, gd32e10x_timer.o(i.timer_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim2Init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimer1
</UL>

<P><STRONG><a name="[13f]"></a>timer_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32e10x_timer.o(i.timer_enable))
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim2Init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimer1
</UL>

<P><STRONG><a name="[225]"></a>timer_expired</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, timer.o(i.timer_expired))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_expired
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_time
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_polling
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dhcp
</UL>

<P><STRONG><a name="[13c]"></a>timer_init</STRONG> (Thumb, 134 bytes, Stack size 0 bytes, gd32e10x_timer.o(i.timer_init))
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim2Init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimer1
</UL>

<P><STRONG><a name="[13e]"></a>timer_interrupt_enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32e10x_timer.o(i.timer_interrupt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim2Init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimer1
</UL>

<P><STRONG><a name="[13d]"></a>timer_interrupt_flag_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gd32e10x_timer.o(i.timer_interrupt_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_IRQHandler
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim2Init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimer1
</UL>

<P><STRONG><a name="[1e5]"></a>timer_interrupt_flag_get</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gd32e10x_timer.o(i.timer_interrupt_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_IRQHandler
</UL>

<P><STRONG><a name="[24d]"></a>timer_reset</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, timer.o(i.timer_reset))
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_polling
</UL>

<P><STRONG><a name="[224]"></a>timer_set</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, timer.o(i.timer_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = timer_set
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_time
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_polling
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dhcp
</UL>

<P><STRONG><a name="[1f4]"></a>u8cpy</STRONG> (Thumb, 34 bytes, Stack size 20 bytes, tcp_client.o(i.u8cpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = u8cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UipClient2Server
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_appcall
</UL>

<P><STRONG><a name="[244]"></a>udp_appcall</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, uip_appcall.o(i.udp_appcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = udp_appcall &rArr; resolv_appcall &rArr; newdata &rArr; resolv_found &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_client_appcall
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolv_appcall
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpc_appcall
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
</UL>

<P><STRONG><a name="[245]"></a>udp_client_appcall</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, udp_client.o(i.udp_client_appcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = udp_client_appcall &rArr; uip_send
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUipUdpConn
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_send
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_appcall
</UL>

<P><STRONG><a name="[248]"></a>uip_add32</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, uip.o(i.uip_add32))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_add_rcv_nxt
</UL>

<P><STRONG><a name="[249]"></a>uip_arp_arpin</STRONG> (Thumb, 216 bytes, Stack size 8 bytes, uip_arp.o(i.uip_arp_arpin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uip_arp_arpin &rArr; uip_arp_update
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_arp_update
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_polling
</UL>

<P><STRONG><a name="[138]"></a>uip_arp_init</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, uip_arp.o(i.uip_arp_init))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNet
</UL>

<P><STRONG><a name="[1e7]"></a>uip_arp_out</STRONG> (Thumb, 366 bytes, Stack size 8 bytes, uip_arp.o(i.uip_arp_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uip_arp_out
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_polling
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TcpClose
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdpSendData
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TcpSendData
</UL>

<P><STRONG><a name="[24e]"></a>uip_arp_timer</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, uip_arp.o(i.uip_arp_timer))
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_polling
</UL>

<P><STRONG><a name="[8d]"></a>uip_connect</STRONG> (Thumb, 254 bytes, Stack size 12 bytes, uip.o(i.uip_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = uip_connect
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetRunning
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyTarIp
</UL>

<P><STRONG><a name="[137]"></a>uip_init</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, uip.o(i.uip_init))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNet
</UL>

<P><STRONG><a name="[24b]"></a>uip_ipchksum</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, uip.o(i.uip_ipchksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = uip_ipchksum &rArr; chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
</UL>

<P><STRONG><a name="[130]"></a>uip_listen</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, uip.o(i.uip_listen))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLocalIP
</UL>

<P><STRONG><a name="[242]"></a>uip_log</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uip_appcall.o(i.uip_log))
<BR><BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_appcall
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_appcall
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
</UL>

<P><STRONG><a name="[18c]"></a>uip_polling</STRONG> (Thumb, 258 bytes, Stack size 8 bytes, tapdev.o(i.uip_polling))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = uip_polling &rArr; uip_process &rArr; tcp_appcall &rArr; tcp_server_appcall &rArr; AnalyModBus &rArr; SetDODevBufData &rArr; DownLoad2TerminalWT2 &rArr; SendLoraData &rArr; JudgeDevSendTim &rArr; LoraPro &rArr;  SendLoraData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_set
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_reset
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_expired
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tapdev_send
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tapdev_read
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_arp_timer
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_arp_out
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_arp_arpin
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetRunning
</UL>

<P><STRONG><a name="[1e6]"></a>uip_process</STRONG> (Thumb, 4600 bytes, Stack size 16 bytes, uip.o(i.uip_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = uip_process &rArr; tcp_appcall &rArr; tcp_server_appcall &rArr; AnalyModBus &rArr; SetDODevBufData &rArr; DownLoad2TerminalWT2 &rArr; SendLoraData &rArr; JudgeDevSendTim &rArr; LoraPro &rArr;  SendLoraData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_log
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_appcall
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_appcall
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_udpchksum
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_tcpchksum
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ipchksum
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_add32
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_add_rcv_nxt
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_polling
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TcpClose
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdpSendData
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TcpSendData
</UL>

<P><STRONG><a name="[1f5]"></a>uip_send</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, uip.o(i.uip_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uip_send
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UipServerAck
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_client_appcall
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_appcall
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_appcall
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_entries
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_request
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_discover
</UL>

<P><STRONG><a name="[250]"></a>uip_tcpchksum</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uip.o(i.uip_tcpchksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = uip_tcpchksum &rArr; upper_layer_chksum &rArr; chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upper_layer_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
</UL>

<P><STRONG><a name="[190]"></a>uip_udp_new</STRONG> (Thumb, 204 bytes, Stack size 12 bytes, uip.o(i.uip_udp_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = uip_udp_new
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetRunning
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolv_conf
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpc_init
</UL>

<P><STRONG><a name="[24f]"></a>uip_udpchksum</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uip.o(i.uip_udpchksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = uip_udpchksum &rArr; upper_layer_chksum &rArr; chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upper_layer_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
</UL>

<P><STRONG><a name="[144]"></a>usart_baudrate_set</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, gd32e10x_usart.o(i.usart_baudrate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUsart1
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUsart0
</UL>

<P><STRONG><a name="[1f0]"></a>usart_data_receive</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32e10x_usart.o(i.usart_data_receive))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
</UL>

<P><STRONG><a name="[1f1]"></a>usart_data_transmit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32e10x_usart.o(i.usart_data_transmit))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
</UL>

<P><STRONG><a name="[141]"></a>usart_deinit</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, gd32e10x_usart.o(i.usart_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUsart0
</UL>

<P><STRONG><a name="[ab]"></a>usart_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32e10x_usart.o(i.usart_disable))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseGSM
</UL>

<P><STRONG><a name="[14a]"></a>usart_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32e10x_usart.o(i.usart_enable))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUsart1
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUsart0
</UL>

<P><STRONG><a name="[149]"></a>usart_hardware_flow_cts_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32e10x_usart.o(i.usart_hardware_flow_cts_config))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUsart1
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUsart0
</UL>

<P><STRONG><a name="[148]"></a>usart_hardware_flow_rts_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32e10x_usart.o(i.usart_hardware_flow_rts_config))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUsart1
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUsart0
</UL>

<P><STRONG><a name="[19e]"></a>usart_interrupt_disable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gd32e10x_usart.o(i.usart_interrupt_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutInUart0
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutInUart1
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
</UL>

<P><STRONG><a name="[14b]"></a>usart_interrupt_enable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gd32e10x_usart.o(i.usart_interrupt_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutInUart0
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutInUart1
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUsart1
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUsart0
</UL>

<P><STRONG><a name="[1ef]"></a>usart_interrupt_flag_get</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, gd32e10x_usart.o(i.usart_interrupt_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usart_interrupt_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
</UL>

<P><STRONG><a name="[147]"></a>usart_parity_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32e10x_usart.o(i.usart_parity_config))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUsart1
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUsart0
</UL>

<P><STRONG><a name="[143]"></a>usart_receive_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32e10x_usart.o(i.usart_receive_config))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUsart1
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUsart0
</UL>

<P><STRONG><a name="[146]"></a>usart_stop_bit_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32e10x_usart.o(i.usart_stop_bit_set))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUsart1
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUsart0
</UL>

<P><STRONG><a name="[142]"></a>usart_transmit_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32e10x_usart.o(i.usart_transmit_config))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUsart1
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUsart0
</UL>

<P><STRONG><a name="[145]"></a>usart_word_length_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32e10x_usart.o(i.usart_word_length_set))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUsart1
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUsart0
</UL>

<P><STRONG><a name="[167]"></a>writeCString</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, mqttpacket.o(i.writeCString))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = writeCString &rArr; writeInt
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeInt
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMQTTString
</UL>

<P><STRONG><a name="[165]"></a>writeChar</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mqttpacket.o(i.writeChar))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_zero
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
</UL>

<P><STRONG><a name="[168]"></a>writeInt</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, mqttpacket.o(i.writeInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = writeInt
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCString
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMQTTString
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
</UL>

<P><STRONG><a name="[169]"></a>writeMQTTString</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, mqttpacket.o(i.writeMQTTString))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = writeMQTTString &rArr; writeCString &rArr; writeInt
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCString
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeInt
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[23d]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, systick.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_config
</UL>

<P><STRONG><a name="[f1]"></a>GSMToAnalysisData</STRONG> (Thumb, 880 bytes, Stack size 24 bytes, gsm234g.o(i.GSMToAnalysisData))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GSMToAnalysisData &rArr; GprsAnalysisCmd3GOr4G &rArr; CompStr
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompStr
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimAnalysisCmd
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsAnalysisCmd3GOr4G
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsAnalysisCmd2G
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartToGSM
</UL>

<P><STRONG><a name="[153]"></a>JudgeDevOnline</STRONG> (Thumb, 286 bytes, Stack size 8 bytes, loradealdat.o(i.JudgeDevOnline))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = JudgeDevOnline
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraPro
</UL>

<P><STRONG><a name="[9e]"></a>NVIC_SystemReset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, hardware.o(i.NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRefactory
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPower
</UL>

<P><STRONG><a name="[1f8]"></a>W25Q_Write_Disable</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, spi_flah.o(i.W25Q_Write_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Write
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Erase_Sector
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Erase_Chip
</UL>

<P><STRONG><a name="[1f6]"></a>W25Q_Write_Enable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, spi_flah.o(i.W25Q_Write_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = W25Q_Write_Enable &rArr; Spi1ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi1ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Write
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Erase_Sector
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q_Erase_Chip
</UL>

<P><STRONG><a name="[217]"></a>cJSON_New_Item</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cjson.o(i.cJSON_New_Item))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cJSON_New_Item
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithOpts
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array
</UL>

<P><STRONG><a name="[216]"></a>cJSON_strcasecmp</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, cjson.o(i.cJSON_strcasecmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cJSON_strcasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetObjectItem
</UL>

<P><STRONG><a name="[22b]"></a>parse_array</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, cjson.o(i.parse_array))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = parse_array &rArr;  parse_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
</UL>

<P><STRONG><a name="[231]"></a>parse_hex4</STRONG> (Thumb, 276 bytes, Stack size 0 bytes, cjson.o(i.parse_hex4))
<BR><BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_string
</UL>

<P><STRONG><a name="[22e]"></a>parse_number</STRONG> (Thumb, 424 bytes, Stack size 80 bytes, cjson.o(i.parse_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = parse_number &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
</UL>

<P><STRONG><a name="[22f]"></a>parse_object</STRONG> (Thumb, 270 bytes, Stack size 32 bytes, cjson.o(i.parse_object))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + In Cycle
<LI>Call Chain = parse_object &rArr;  parse_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_string
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
</UL>

<P><STRONG><a name="[230]"></a>parse_string</STRONG> (Thumb, 448 bytes, Stack size 40 bytes, cjson.o(i.parse_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = parse_string
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hex4
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object
</UL>

<P><STRONG><a name="[21a]"></a>parse_value</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, cjson.o(i.parse_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = parse_value &rArr; parse_number &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_string
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithOpts
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array
</UL>

<P><STRONG><a name="[219]"></a>skip</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cjson.o(i.skip))
<BR><BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithOpts
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array
</UL>

<P><STRONG><a name="[24c]"></a>chksum</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, uip.o(i.chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ipchksum
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upper_layer_chksum
</UL>

<P><STRONG><a name="[247]"></a>uip_add_rcv_nxt</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, uip.o(i.uip_add_rcv_nxt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uip_add_rcv_nxt
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_add32
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
</UL>

<P><STRONG><a name="[251]"></a>upper_layer_chksum</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, uip.o(i.upper_layer_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = upper_layer_chksum &rArr; chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_udpchksum
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_tcpchksum
</UL>

<P><STRONG><a name="[24a]"></a>uip_arp_update</STRONG> (Thumb, 272 bytes, Stack size 8 bytes, uip_arp.o(i.uip_arp_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uip_arp_update
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_arp_arpin
</UL>

<P><STRONG><a name="[238]"></a>add_end</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dhcpc.o(i.add_end))
<BR><BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_request
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_discover
</UL>

<P><STRONG><a name="[236]"></a>add_msg_type</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, dhcpc.o(i.add_msg_type))
<BR><BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_request
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_discover
</UL>

<P><STRONG><a name="[23a]"></a>add_req_ipaddr</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dhcpc.o(i.add_req_ipaddr))
<BR><BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_request
</UL>

<P><STRONG><a name="[237]"></a>add_req_options</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, dhcpc.o(i.add_req_options))
<BR><BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_discover
</UL>

<P><STRONG><a name="[239]"></a>add_server_id</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dhcpc.o(i.add_server_id))
<BR><BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_request
</UL>

<P><STRONG><a name="[21d]"></a>create_msg</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, dhcpc.o(i.create_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = create_msg
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_request
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_discover
</UL>

<P><STRONG><a name="[21f]"></a>handle_dhcp</STRONG> (Thumb, 616 bytes, Stack size 32 bytes, dhcpc.o(i.handle_dhcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = handle_dhcp &rArr; send_request &rArr; uip_send
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_set
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_expired
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpc_configured
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_request
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_discover
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_msg
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpc_appcall
</UL>

<P><STRONG><a name="[226]"></a>parse_msg</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, dhcpc.o(i.parse_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = parse_msg &rArr; parse_options
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_options
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dhcp
</UL>

<P><STRONG><a name="[22d]"></a>parse_options</STRONG> (Thumb, 118 bytes, Stack size 12 bytes, dhcpc.o(i.parse_options))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = parse_options
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_msg
</UL>

<P><STRONG><a name="[223]"></a>send_discover</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, dhcpc.o(i.send_discover))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = send_discover &rArr; uip_send
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_msg
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_req_options
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_msg_type
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_end
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_send
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dhcp
</UL>

<P><STRONG><a name="[227]"></a>send_request</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, dhcpc.o(i.send_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = send_request &rArr; uip_send
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_msg
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_server_id
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_req_ipaddr
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_msg_type
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_end
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_send
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dhcp
</UL>

<P><STRONG><a name="[21b]"></a>check_entries</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, resolv.o(i.check_entries))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = check_entries &rArr; resolv_found &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolv_found
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_send
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolv_appcall
</UL>

<P><STRONG><a name="[229]"></a>newdata</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, resolv.o(i.newdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = newdata &rArr; resolv_found &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolv_found
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_name
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolv_appcall
</UL>

<P><STRONG><a name="[22a]"></a>parse_name</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, resolv.o(i.parse_name))
<BR><BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newdata
</UL>

<P><STRONG><a name="[23c]"></a>system_clock_120m_hxtal</STRONG> (Thumb, 226 bytes, Stack size 0 bytes, system_gd32e10x.o(i.system_clock_120m_hxtal))
<BR><BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[1e3]"></a>system_clock_config</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_gd32e10x.o(i.system_clock_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = system_clock_config
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_120m_hxtal
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[221]"></a>fmc_ready_wait</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gd32e10x_fmc.o(i.fmc_ready_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fmc_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_state_get
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_word_program
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_page_erase
</UL>

<P><STRONG><a name="[222]"></a>fmc_state_get</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, gd32e10x_fmc.o(i.fmc_state_get))
<BR><BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_ready_wait
</UL>

<P><STRONG><a name="[202]"></a>_printf_core</STRONG> (Thumb, 996 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[211]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[210]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[52]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf8.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0sprintf$8)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
