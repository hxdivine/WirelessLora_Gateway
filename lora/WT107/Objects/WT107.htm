<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\WT107.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\WT107.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Fri Sep 03 14:21:05 2021
<BR><P>
<H3>Maximum Stack Usage =        320 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; $Super$$main &rArr; loraToMatchHost &rArr; LoraRecDat &rArr; LoraSendDat &rArr; LoraRepDat &rArr; LoraDatPro &rArr; InitLora &rArr; SX127X_Lora_init &rArr; SX127X_SetFreq &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[84]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[f]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">NMI_Handler</a><BR>
 <LI><a href="#[11]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">SVC_Handler</a><BR>
 <LI><a href="#[12]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">PendSV_Handler</a><BR>
 <LI><a href="#[2c]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2c]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2c]">ADC_IRQHandler</a> from startup_hc32l13x.o(.text) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[33]">CLKTRIM_IRQHandler</a> from startup_hc32l13x.o(.text) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[18]">DMAC_IRQHandler</a> from startup_hc32l13x.o(.text) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[32]">FLASH_RAM_IRQHandler</a> from startup_hc32l13x.o(.text) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[10]">HardFault_Handler</a> from interrupts_hc32l13x.o(i.HardFault_Handler) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[20]">I2C0_IRQHandler</a> from startup_hc32l13x.o(.text) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[21]">I2C1_IRQHandler</a> from startup_hc32l13x.o(.text) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[31]">LCD_IRQHandler</a> from startup_hc32l13x.o(.text) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[25]">LPTIM_IRQHandler</a> from startup_hc32l13x.o(.text) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[1c]">LPUART0_IRQHandler</a> from startup_hc32l13x.o(.text) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[1d]">LPUART1_IRQHandler</a> from startup_hc32l13x.o(.text) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[30]">LVD_IRQHandler</a> from startup_hc32l13x.o(.text) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[f]">NMI_Handler</a> from startup_hc32l13x.o(.text) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[29]">PCA_IRQHandler</a> from startup_hc32l13x.o(.text) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[2d]">PCNT_IRQHandler</a> from startup_hc32l13x.o(.text) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[14]">PORTA_IRQHandler</a> from startup_hc32l13x.o(.text) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[15]">PORTB_IRQHandler</a> from startup_hc32l13x.o(.text) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[16]">PORTC_IRQHandler</a> from startup_hc32l13x.o(.text) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[17]">PORTD_IRQHandler</a> from startup_hc32l13x.o(.text) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[12]">PendSV_Handler</a> from startup_hc32l13x.o(.text) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[2b]">RTC_IRQHandler</a> from startup_hc32l13x.o(.text) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[e]">Reset_Handler</a> from startup_hc32l13x.o(.text) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[1e]">SPI0_IRQHandler</a> from startup_hc32l13x.o(.text) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[1f]">SPI1_IRQHandler</a> from startup_hc32l13x.o(.text) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[11]">SVC_Handler</a> from startup_hc32l13x.o(.text) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[13]">SysTick_Handler</a> from interrupts_hc32l13x.o(i.SysTick_Handler) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[34]">SystemInit</a> from system_hc32l13x.o(i.SystemInit) referenced from startup_hc32l13x.o(.text)
 <LI><a href="#[22]">TIM0_IRQHandler</a> from hc_tim.o(i.TIM0_IRQHandler) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[23]">TIM1_IRQHandler</a> from startup_hc32l13x.o(.text) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[24]">TIM2_IRQHandler</a> from startup_hc32l13x.o(.text) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[19]">TIM3_IRQHandler</a> from hc_time3.o(i.TIM3_IRQHandler) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[26]">TIM4_IRQHandler</a> from startup_hc32l13x.o(.text) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[27]">TIM5_IRQHandler</a> from startup_hc32l13x.o(.text) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[28]">TIM6_IRQHandler</a> from startup_hc32l13x.o(.text) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[1a]">UART0_IRQHandler</a> from hc_usart.o(i.UART0_IRQHandler) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[1b]">UART1_IRQHandler</a> from hc_usart.o(i.UART1_IRQHandler) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[2e]">VC0_IRQHandler</a> from startup_hc32l13x.o(.text) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[2f]">VC1_IRQHandler</a> from startup_hc32l13x.o(.text) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[2a]">WDT_IRQHandler</a> from startup_hc32l13x.o(.text) referenced from startup_hc32l13x.o(RESET)
 <LI><a href="#[38]">__main</a> from __main.o(!!!main) referenced from startup_hc32l13x.o(.text)
 <LI><a href="#[37]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[36]">fputc</a> from hc_usart.o(i.fputc) referenced from _printf_char_file.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[38]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[39]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[3b]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[13e]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[13f]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[3c]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[140]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[60]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[3d]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[3e]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[40]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent_end
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[42]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[49]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[141]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[44]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[142]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[143]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[144]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[145]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[146]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[147]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[148]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[149]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[14a]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[14b]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[14c]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[14d]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[14e]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[14f]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[150]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[151]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[152]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[153]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[154]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[155]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[4e]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[156]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[157]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[158]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[159]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[15a]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[15b]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[3a]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[15c]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[46]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[48]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[15d]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[4a]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; $Super$$main &rArr; loraToMatchHost &rArr; LoraRecDat &rArr; LoraSendDat &rArr; LoraRepDat &rArr; LoraDatPro &rArr; InitLora &rArr; SX127X_Lora_init &rArr; SX127X_SetFreq &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[15e]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[86]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[4d]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[15f]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[4f]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[111]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_GetHClkFreq
</UL>

<P><STRONG><a name="[160]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[e]"></a>Reset_Handler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, startup_hc32l13x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[161]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[f]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32l13x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32l13x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32l13x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32l13x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>CLKTRIM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32l13x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32l13x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>FLASH_RAM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32l13x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32l13x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32l13x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32l13x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>LPTIM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32l13x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>LPUART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32l13x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32l13x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>LVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32l13x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>PCA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32l13x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>PCNT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32l13x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>PORTA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32l13x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>PORTB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32l13x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>PORTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32l13x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>PORTD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32l13x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32l13x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32l13x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32l13x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32l13x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32l13x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32l13x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32l13x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32l13x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>VC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32l13x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>VC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32l13x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32l13x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_hc32l13x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[162]"></a>__use_no_semihosting</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi_2.o(.text), UNUSED)

<P><STRONG><a name="[51]"></a>malloc</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP30_GetCo2Data
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH175_GetIllData
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gxht_ReadDat
</UL>

<P><STRONG><a name="[54]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP30_GetCo2Data
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH175_GetIllData
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gxht_ReadDat
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[55]"></a>__2printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugDevInfo
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loraToMatchHost
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCSetDevUid
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraPro
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_Lora_init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraDatPro
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLora
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Soil_GetSoilTempAndHUmi
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP30_GetCo2Data
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gxht_GetTempAndHumi
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH175_GetIllData
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChipId
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_SetFreq
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraRepDat
</UL>

<P><STRONG><a name="[58]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[59]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[57]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[3f]"></a>_printf_int_dec</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned (Weak Reference)
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed (Weak Reference)
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[41]"></a>_printf_int_hex</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned (Weak Reference)
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[163]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[5e]"></a>__printf</STRONG> (Thumb, 306 bytes, Stack size 32 bytes, __printf_flags_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[62]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[61]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[63]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDevInfoDef
</UL>

<P><STRONG><a name="[164]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[ad]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Init
</UL>

<P><STRONG><a name="[165]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[166]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[137]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1us
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1ms
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay10us
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay100us
</UL>

<P><STRONG><a name="[167]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[df]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraPro
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_RxPacket
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Soil_GetSoilTempAndHUmi
</UL>

<P><STRONG><a name="[168]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[5]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[c4]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gxht_ReadDat
</UL>

<P><STRONG><a name="[65]"></a>_dadd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[c3]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gxht_ReadDat
</UL>

<P><STRONG><a name="[68]"></a>_dsub</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[169]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub.o(.text), UNUSED)

<P><STRONG><a name="[69]"></a>_drsb</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[8e]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH175_GetIllData
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gxht_ReadDat
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_SetFreq
</UL>

<P><STRONG><a name="[6b]"></a>_ddiv</STRONG> (Thumb, 1072 bytes, Stack size 64 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drdiv
</UL>

<P><STRONG><a name="[6a]"></a>_drdiv</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[c5]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gxht_ReadDat
</UL>

<P><STRONG><a name="[16a]"></a>_dfix</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, dfixi.o(.text), UNUSED)

<P><STRONG><a name="[8f]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH175_GetIllData
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gxht_ReadDat
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_SetFreq
</UL>

<P><STRONG><a name="[16b]"></a>_dfixu</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, dfixui.o(.text), UNUSED)

<P><STRONG><a name="[6d]"></a>__aeabi_i2d_normalise</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[6c]"></a>__aeabi_i2d</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>

<P><STRONG><a name="[16c]"></a>_dflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[6e]"></a>__aeabi_ui2d</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_SetFreq
</UL>

<P><STRONG><a name="[16d]"></a>_dfltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[c2]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gxht_ReadDat
</UL>

<P><STRONG><a name="[16e]"></a>_dmul</STRONG> (Thumb, 558 bytes, Stack size 56 bytes, dmul.o(.text), UNUSED)

<P><STRONG><a name="[8d]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH175_GetIllData
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gxht_ReadDat
</UL>

<P><STRONG><a name="[16f]"></a>_f2d</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, f2d.o(.text), UNUSED)

<P><STRONG><a name="[130]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 20 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>

<P><STRONG><a name="[70]"></a>_fdiv</STRONG> (Thumb, 334 bytes, Stack size 20 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frdiv
</UL>

<P><STRONG><a name="[6f]"></a>_frdiv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
</UL>

<P><STRONG><a name="[132]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>

<P><STRONG><a name="[170]"></a>_ffixu</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ffixui.o(.text), UNUSED)

<P><STRONG><a name="[72]"></a>__aeabi_i2f_normalise</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[71]"></a>__aeabi_i2f</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>

<P><STRONG><a name="[171]"></a>_fflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[73]"></a>__aeabi_ui2f</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH175_GetIllData
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gxht_ReadDat
</UL>

<P><STRONG><a name="[172]"></a>_ffltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[173]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[174]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[52]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[175]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[176]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[c]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[8]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[53]"></a>__Heap_Full</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[75]"></a>__Heap_Broken</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[45]"></a>_init_alloc</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[77]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[6]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[5d]"></a>_printf_int_common</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[78]"></a>_printf_cs_common</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_mbtowc (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[7a]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[43]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[56]"></a>_printf_char_file</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[5c]"></a>__rt_udiv10</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[7d]"></a>__fpl_fcmp_InfNaN</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, fcmpin.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN2
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frcmple
</UL>

<P><STRONG><a name="[177]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[83]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[178]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[74]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[7b]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[7c]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[76]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[7e]"></a>__fpl_cmpreturn</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, cmpret.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
</UL>

<P><STRONG><a name="[7f]"></a>__fpl_fcheck_NaN2</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fnan2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
</UL>

<P><STRONG><a name="[47]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[4c]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[81]"></a>__sig_exit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __sig_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[80]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[82]"></a>__fpl_return_NaN</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, retnan.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN2
</UL>

<P><STRONG><a name="[87]"></a>__default_signal_display</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[4b]"></a>main</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, system_hc32l13x.o(i.$Sub$$main))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = main &rArr; $Super$$main &rArr; loraToMatchHost &rArr; LoraRecDat &rArr; LoraSendDat &rArr; LoraRepDat &rArr; LoraDatPro &rArr; InitLora &rArr; SX127X_Lora_init &rArr; SX127X_SetFreq &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[8a]"></a>BH175_GetIllData</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, bh1750.o(i.BH175_GetIllData))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = BH175_GetIllData &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1ms
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Restart
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH175_Ready
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH175_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGetCo2Data
</UL>

<P><STRONG><a name="[92]"></a>BH175_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bh1750.o(i.BH175_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = BH175_Init &rArr; BH175_SendCmd &rArr; IIC_SendByte &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; Gpio_Init &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1ms
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH175_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TotalInit
</UL>

<P><STRONG><a name="[8c]"></a>BH175_ReadData</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, bh1750.o(i.BH175_ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = BH175_ReadData &rArr; IIC_SendByte &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; Gpio_Init &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SendByte
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH175_GetIllData
</UL>

<P><STRONG><a name="[8b]"></a>BH175_Ready</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bh1750.o(i.BH175_Ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = BH175_Ready &rArr; BH175_SendCmd &rArr; IIC_SendByte &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; Gpio_Init &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1ms
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH175_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH175_GetIllData
</UL>

<P><STRONG><a name="[93]"></a>BH175_SendCmd</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, bh1750.o(i.BH175_SendCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = BH175_SendCmd &rArr; IIC_SendByte &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; Gpio_Init &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH175_Init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH175_Ready
</UL>

<P><STRONG><a name="[117]"></a>Bt_ClearIntFlag</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, bt.o(i.Bt_ClearIntFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Bt_ClearIntFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM0_IRQHandler
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimInit
</UL>

<P><STRONG><a name="[115]"></a>Bt_GetIntFlag</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, bt.o(i.Bt_GetIntFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Bt_GetIntFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM0_IRQHandler
</UL>

<P><STRONG><a name="[11c]"></a>Bt_M0_ARRSet</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, bt.o(i.Bt_M0_ARRSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Bt_M0_ARRSet
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimInit
</UL>

<P><STRONG><a name="[11d]"></a>Bt_M0_Cnt16Set</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, bt.o(i.Bt_M0_Cnt16Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Bt_M0_Cnt16Set
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimInit
</UL>

<P><STRONG><a name="[11f]"></a>Bt_M0_Run</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bt.o(i.Bt_M0_Run))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Bt_M0_Run
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimInit
</UL>

<P><STRONG><a name="[11e]"></a>Bt_Mode0_EnableIrq</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bt.o(i.Bt_Mode0_EnableIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Bt_Mode0_EnableIrq
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimInit
</UL>

<P><STRONG><a name="[11b]"></a>Bt_Mode0_Init</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, bt.o(i.Bt_Mode0_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Bt_Mode0_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimInit
</UL>

<P><STRONG><a name="[98]"></a>CLEDOFF</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hardware.o(i.CLEDOFF))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CLEDOFF &rArr; Gpio_ClrIO &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDShow
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loraToMatchHost
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraPro
</UL>

<P><STRONG><a name="[9a]"></a>CLEDON</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hardware.o(i.CLEDON))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CLEDON &rArr; Gpio_SetIO &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TotalInit
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraRecDat
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDShow
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loraToMatchHost
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadyToSend
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraPro
</UL>

<P><STRONG><a name="[de]"></a>CheckAlarmTim</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, main.o(i.CheckAlarmTim))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraPro
</UL>

<P><STRONG><a name="[f1]"></a>CheckCrc8</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, sgp30.o(i.CheckCrc8))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CheckCrc8
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP30_GetCo2Data
</UL>

<P><STRONG><a name="[9c]"></a>ClkInit</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, hardware.o(i.ClkInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ClkInit &rArr; Sysctrl_SysClkSwitch &rArr; SystemCoreClockUpdate &rArr; Sysctrl_GetHClkFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SysClkSwitch
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetRCHTrim
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPeripheralGate
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkSourceEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TotalInit
</UL>

<P><STRONG><a name="[a1]"></a>CloseUartRx</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc_usart.o(i.CloseUartRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CloseUartRx &rArr; Uart_DisableIrq &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_DisableIrq
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDevSerialNum
</UL>

<P><STRONG><a name="[a3]"></a>DebugDevInfo</STRONG> (Thumb, 228 bytes, Stack size 8 bytes, hardware.o(i.DebugDevInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = DebugDevInfo &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraRecDat
</UL>

<P><STRONG><a name="[a4]"></a>EnableNvic</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, interrupts_hc32l13x.o(i.EnableNvic))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EnableNvic &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1Init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart0Init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time3Init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimInit
</UL>

<P><STRONG><a name="[a6]"></a>FlashInit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, hc_flash.o(i.FlashInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = FlashInit &rArr; Flash_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay100us
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TotalInit
</UL>

<P><STRONG><a name="[a9]"></a>FlashReadData</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, hc_flash.o(i.FlashReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FlashReadData &rArr; delay1ms
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1ms
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveDevInfo
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDevInfo
</UL>

<P><STRONG><a name="[aa]"></a>FlashWriteData</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, hc_flash.o(i.FlashWriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = FlashWriteData &rArr; Flash_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteByte
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SectorErase
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveDevInfo
</UL>

<P><STRONG><a name="[a8]"></a>Flash_Init</STRONG> (Thumb, 188 bytes, Stack size 64 bytes, flash.o(i.Flash_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Flash_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashInit
</UL>

<P><STRONG><a name="[af]"></a>Flash_LockAll</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, flash.o(i.Flash_LockAll))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteByte
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SectorErase
</UL>

<P><STRONG><a name="[ab]"></a>Flash_SectorErase</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, flash.o(i.Flash_SectorErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Flash_SectorErase
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_UnlockAll
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_LockAll
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteData
</UL>

<P><STRONG><a name="[ae]"></a>Flash_UnlockAll</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, flash.o(i.Flash_UnlockAll))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteByte
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SectorErase
</UL>

<P><STRONG><a name="[ac]"></a>Flash_WriteByte</STRONG> (Thumb, 158 bytes, Stack size 12 bytes, flash.o(i.Flash_WriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Flash_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_UnlockAll
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_LockAll
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteData
</UL>

<P><STRONG><a name="[b0]"></a>GPIOInit</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, hardware.o(i.GPIOInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPIOInit &rArr; Gpio_Init &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TotalInit
</UL>

<P><STRONG><a name="[bd]"></a>GetBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ddl.o(i.GetBit))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_GetInputIO
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_GetStatus
</UL>

<P><STRONG><a name="[b2]"></a>GetChipId</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, hardware.o(i.GetChipId))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = GetChipId &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TotalInit
</UL>

<P><STRONG><a name="[b3]"></a>GetCo2SenorBySec</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, main.o(i.GetCo2SenorBySec))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = GetCo2SenorBySec &rArr; GetGetCo2Data &rArr; BH175_GetIllData &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WdtFeedDog
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysSec
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGetCo2Data
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loraToMatchHost
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDevSerialNum
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraPro
</UL>

<P><STRONG><a name="[b5]"></a>GetGetCo2Data</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, hardware.o(i.GetGetCo2Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = GetGetCo2Data &rArr; BH175_GetIllData &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1ms
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP30_GetCo2Data
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gxht_GetTempAndHumi
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH175_GetIllData
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCo2SenorBySec
</UL>

<P><STRONG><a name="[b9]"></a>GetSensorData</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hardware.o(i.GetSensorData))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = GetSensorData &rArr; Soil_GetSoilTempAndHUmi &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Soil_GetSoilTempAndHUmi
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraPro
</UL>

<P><STRONG><a name="[dc]"></a>GetSysMin</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hc_tim.o(i.GetSysMin))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loraToMatchHost
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraPro
</UL>

<P><STRONG><a name="[b4]"></a>GetSysSec</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hc_tim.o(i.GetSysSec))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraPro
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCo2SenorBySec
</UL>

<P><STRONG><a name="[99]"></a>Gpio_ClrIO</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, gpio.o(i.Gpio_ClrIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Gpio_ClrIO &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLEDOFF
</UL>

<P><STRONG><a name="[bc]"></a>Gpio_GetInputIO</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, gpio.o(i.Gpio_GetInputIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Gpio_GetInputIO
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SDA
</UL>

<P><STRONG><a name="[b1]"></a>Gpio_Init</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, gpio.o(i.Gpio_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Gpio_Init &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLora
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartPortInit
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiPortInit
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_IN
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOInit
</UL>

<P><STRONG><a name="[d1]"></a>Gpio_SetAfMode</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gpio.o(i.Gpio_SetAfMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Gpio_SetAfMode
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLora
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartPortInit
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiPortInit
</UL>

<P><STRONG><a name="[9b]"></a>Gpio_SetIO</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, gpio.o(i.Gpio_SetIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Gpio_SetIO &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLEDON
</UL>

<P><STRONG><a name="[be]"></a>Gpio_WriteOutputIO</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, gpio.o(i.Gpio_WriteOutputIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Gpio_WriteOutputIO &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SendByte
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_ReadByte
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_ACK
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_Reset
</UL>

<P><STRONG><a name="[b8]"></a>Gxht_GetTempAndHumi</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, gxht3l.o(i.Gxht_GetTempAndHumi))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = Gxht_GetTempAndHumi &rArr; Gxht_ReadDat &rArr; IIC_ReadByte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; Gpio_Init &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1ms
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SendByte
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gxht_Restart
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gxht_WriteCmd
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gxht_ReadDat
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGetCo2Data
</UL>

<P><STRONG><a name="[c1]"></a>Gxht_ReadDat</STRONG> (Thumb, 252 bytes, Stack size 72 bytes, gxht3l.o(i.Gxht_ReadDat))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Gxht_ReadDat &rArr; IIC_ReadByte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; Gpio_Init &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_ReadByte
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gxht_GetTempAndHumi
</UL>

<P><STRONG><a name="[bf]"></a>Gxht_Restart</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gxht3l.o(i.Gxht_Restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Gxht_Restart &rArr; IIC_SendByte &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; Gpio_Init &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TotalInit
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gxht_GetTempAndHumi
</UL>

<P><STRONG><a name="[c0]"></a>Gxht_WriteCmd</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gxht3l.o(i.Gxht_WriteCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Gxht_WriteCmd &rArr; IIC_SendByte &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; Gpio_Init &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gxht_GetTempAndHumi
</UL>

<P><STRONG><a name="[10]"></a>HardFault_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, interrupts_hc32l13x.o(i.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[c6]"></a>IIC_ACK</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, hc_i2c.o(i.IIC_ACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IIC_ACK &rArr; SDA_OUT &rArr; Gpio_Init &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_WriteOutputIO
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1us
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_ReadByte
</UL>

<P><STRONG><a name="[c9]"></a>IIC_Init</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, hc_i2c.o(i.IIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IIC_Init &rArr; Gpio_WriteOutputIO &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_WriteOutputIO
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddl_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TotalInit
</UL>

<P><STRONG><a name="[cb]"></a>IIC_NAck</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, hc_i2c.o(i.IIC_NAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IIC_NAck &rArr; SDA_OUT &rArr; Gpio_Init &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_WriteOutputIO
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1us
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay10us
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_ReadByte
</UL>

<P><STRONG><a name="[96]"></a>IIC_ReadByte</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, hc_i2c.o(i.IIC_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = IIC_ReadByte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; Gpio_Init &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_WriteOutputIO
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1us
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_IN
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SDA
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_ACK
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP30_GetCo2Data
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP30_Reset
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gxht_ReadDat
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Restart
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH175_ReadData
</UL>

<P><STRONG><a name="[90]"></a>IIC_Restart</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bh1750.o(i.IIC_Restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = IIC_Restart &rArr; IIC_SendByte &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; Gpio_Init &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SendByte
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH175_GetIllData
</UL>

<P><STRONG><a name="[95]"></a>IIC_SendByte</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, hc_i2c.o(i.IIC_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = IIC_SendByte &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; Gpio_Init &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_WriteOutputIO
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1us
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP30_GetCo2Data
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gxht_Restart
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gxht_GetTempAndHumi
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP30_SendCmd
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP30_Reset
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gxht_WriteCmd
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Restart
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH175_SendCmd
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH175_ReadData
</UL>

<P><STRONG><a name="[94]"></a>IIC_Start</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, hc_i2c.o(i.IIC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IIC_Start &rArr; SDA_OUT &rArr; Gpio_Init &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_WriteOutputIO
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1us
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP30_GetCo2Data
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gxht_Restart
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gxht_GetTempAndHumi
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP30_SendCmd
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP30_Reset
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gxht_WriteCmd
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Restart
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH175_SendCmd
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH175_ReadData
</UL>

<P><STRONG><a name="[97]"></a>IIC_Stop</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, hc_i2c.o(i.IIC_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IIC_Stop &rArr; SDA_OUT &rArr; Gpio_Init &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_WriteOutputIO
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1us
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP30_GetCo2Data
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gxht_Restart
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gxht_GetTempAndHumi
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP30_SendCmd
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP30_Reset
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gxht_WriteCmd
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gxht_ReadDat
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Restart
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH175_SendCmd
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH175_ReadData
</UL>

<P><STRONG><a name="[cf]"></a>IIC_Wait_Ack</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, hc_i2c.o(i.IIC_Wait_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; Gpio_Init &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_WriteOutputIO
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1us
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_IN
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SDA
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SendByte
</UL>

<P><STRONG><a name="[d0]"></a>InitLora</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, lora.o(i.InitLora))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = InitLora &rArr; SX127X_Lora_init &rArr; SX127X_SetFreq &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetAfMode
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddl_memclr
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_StartRx
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_Lora_init
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraDatPro
</UL>

<P><STRONG><a name="[e1]"></a>IsChipId</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, loradealdat.o(i.IsChipId))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IsChipId
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraRecDat
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraRepDat
</UL>

<P><STRONG><a name="[db]"></a>IsDataAlarm</STRONG> (Thumb, 298 bytes, Stack size 0 bytes, hardware.o(i.IsDataAlarm))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraPro
</UL>

<P><STRONG><a name="[d4]"></a>LEDShow</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, hardware.o(i.LEDShow))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LEDShow &rArr; CLEDON &rArr; Gpio_SetIO &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1ms
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLEDON
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLEDOFF
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraRecDat
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadyToSend
</UL>

<P><STRONG><a name="[d5]"></a>LoraDatPro</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, lora.o(i.LoraDatPro))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = LoraDatPro &rArr; InitLora &rArr; SX127X_Lora_init &rArr; SX127X_SetFreq &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_Write
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_StartRx
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_RxPacket
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_Read
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_Current_RSSI
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLora
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraRecDat
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraRepDat
</UL>

<P><STRONG><a name="[da]"></a>LoraPro</STRONG> (Thumb, 502 bytes, Stack size 16 bytes, main.o(i.LoraPro))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = LoraPro &rArr; ReadyToSend &rArr; LoraSendDat &rArr; LoraRepDat &rArr; LoraDatPro &rArr; InitLora &rArr; SX127X_Lora_init &rArr; SX127X_SetFreq &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay100us
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WdtFeedDog
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsDataAlarm
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysSec
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysMin
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSensorData
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLEDON
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLEDOFF
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadyToSend
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCo2SenorBySec
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAlarmTim
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loraToMatchHost
</UL>

<P><STRONG><a name="[e0]"></a>LoraRecDat</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, loradealdat.o(i.LoraRecDat))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = LoraRecDat &rArr; LoraSendDat &rArr; LoraRepDat &rArr; LoraDatPro &rArr; InitLora &rArr; SX127X_Lora_init &rArr; SX127X_SetFreq &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveDevInfo
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraSendDat
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDShow
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugDevInfo
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLEDON
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraDatPro
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetWorkFreq
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRepCnt
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsChipId
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loraToMatchHost
</UL>

<P><STRONG><a name="[e6]"></a>LoraRepDat</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, loradealdat.o(i.LoraRepDat))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = LoraRepDat &rArr; LoraDatPro &rArr; InitLora &rArr; SX127X_Lora_init &rArr; SX127X_SetFreq &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1ms
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveDevInfo
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraDatPro
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRepCnt
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsChipId
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraSendDat
</UL>

<P><STRONG><a name="[e5]"></a>LoraSendDat</STRONG> (Thumb, 474 bytes, Stack size 16 bytes, loradealdat.o(i.LoraSendDat))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = LoraSendDat &rArr; LoraRepDat &rArr; LoraDatPro &rArr; InitLora &rArr; SX127X_Lora_init &rArr; SX127X_SetFreq &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1ms
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_SetFreq
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendLoraPack
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraRepDat
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraRecDat
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loraToMatchHost
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadyToSend
</UL>

<P><STRONG><a name="[104]"></a>ModBusCrc</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, soil.o(i.ModBusCrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ModBusCrc
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Soil_GetSoilTempAndHUmi
</UL>

<P><STRONG><a name="[e9]"></a>PCSetDevUid</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, main.o(i.PCSetDevUid))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = PCSetDevUid &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveDevInfo
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDevSerialNum
</UL>

<P><STRONG><a name="[ea]"></a>PCUsart1</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hc_usart.o(i.PCUsart1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PCUsart1 &rArr; Uart_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendDataIt
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStr
</UL>

<P><STRONG><a name="[ed]"></a>ReadDevInfo</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sysconfig.o(i.ReadDevInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ReadDevInfo &rArr; FlashReadData &rArr; delay1ms
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TotalInit
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDevInfoDef
</UL>

<P><STRONG><a name="[ce]"></a>Read_SDA</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hc_i2c.o(i.Read_SDA))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Read_SDA &rArr; Gpio_GetInputIO
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_GetInputIO
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_ReadByte
</UL>

<P><STRONG><a name="[dd]"></a>ReadyToSend</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, main.o(i.ReadyToSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = ReadyToSend &rArr; LoraSendDat &rArr; LoraRepDat &rArr; LoraDatPro &rArr; InitLora &rArr; SX127X_Lora_init &rArr; SX127X_SetFreq &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraSendDat
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDShow
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLEDON
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemReset
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraPro
</UL>

<P><STRONG><a name="[cd]"></a>SDA_IN</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, hc_i2c.o(i.SDA_IN))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SDA_IN &rArr; Gpio_Init &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddl_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_ReadByte
</UL>

<P><STRONG><a name="[c7]"></a>SDA_OUT</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, hc_i2c.o(i.SDA_OUT))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SDA_OUT &rArr; Gpio_Init &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddl_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SendByte
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_ACK
</UL>

<P><STRONG><a name="[b7]"></a>SGP30_GetCo2Data</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, sgp30.o(i.SGP30_GetCo2Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = SGP30_GetCo2Data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1ms
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SendByte
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_ReadByte
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP30_Init
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP30_SendCmd
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckCrc8
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGetCo2Data
</UL>

<P><STRONG><a name="[ef]"></a>SGP30_Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, sgp30.o(i.SGP30_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SGP30_Init &rArr; SGP30_SendCmd &rArr; IIC_SendByte &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; Gpio_Init &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1ms
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP30_SendCmd
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP30_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TotalInit
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP30_GetCo2Data
</UL>

<P><STRONG><a name="[f2]"></a>SGP30_Reset</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sgp30.o(i.SGP30_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SGP30_Reset &rArr; IIC_SendByte &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; Gpio_Init &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SendByte
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP30_Init
</UL>

<P><STRONG><a name="[f0]"></a>SGP30_SendCmd</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, sgp30.o(i.SGP30_SendCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SGP30_SendCmd &rArr; IIC_SendByte &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; Gpio_Init &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP30_Init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP30_GetCo2Data
</UL>

<P><STRONG><a name="[f3]"></a>SPI_Start</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc_spi.o(i.SPI_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_SetCS
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_WriteBuffer
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_ReadBuffer
</UL>

<P><STRONG><a name="[f5]"></a>SPI_Stop</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc_spi.o(i.SPI_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_SetCS
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_WriteBuffer
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_ReadBuffer
</UL>

<P><STRONG><a name="[d9]"></a>SX127X_Current_RSSI</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, sx127x_drive.o(i.SX127X_Current_RSSI))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SX127X_Current_RSSI &rArr; SX127X_Read &rArr; SX127X_ReadBuffer &rArr; Spi1ReadWriteByte &rArr; SpiHardWareRWByte
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraDatPro
</UL>

<P><STRONG><a name="[fd]"></a>SX127X_GetFreq</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, sx127x_drive.o(i.SX127X_GetFreq))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_SetFreq
</UL>

<P><STRONG><a name="[d2]"></a>SX127X_Lora_init</STRONG> (Thumb, 278 bytes, Stack size 16 bytes, sx127x_drive.o(i.SX127X_Lora_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = SX127X_Lora_init &rArr; SX127X_SetFreq &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_Write
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_Read
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_Reset
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_PoutSet
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_SetFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLora
</UL>

<P><STRONG><a name="[f7]"></a>SX127X_PoutSet</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, sx127x_drive.o(i.SX127X_PoutSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SX127X_PoutSet &rArr; SX127X_StandbyMode &rArr; SX127X_Write &rArr; SX127X_WriteBuffer &rArr; Spi1ReadWriteByte &rArr; SpiHardWareRWByte
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_Write
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_Read
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_StandbyMode
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_Lora_init
</UL>

<P><STRONG><a name="[d6]"></a>SX127X_Read</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, sx127x_drive.o(i.SX127X_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SX127X_Read &rArr; SX127X_ReadBuffer &rArr; Spi1ReadWriteByte &rArr; SpiHardWareRWByte
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_RxPacket
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_Lora_init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_Current_RSSI
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraDatPro
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_PoutSet
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_SetFreq
</UL>

<P><STRONG><a name="[fa]"></a>SX127X_ReadBuffer</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, sx127x_hal.o(i.SX127X_ReadBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SX127X_ReadBuffer &rArr; Spi1ReadWriteByte &rArr; SpiHardWareRWByte
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi1ReadWriteByte
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Stop
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_Read
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_ReadFifo
</UL>

<P><STRONG><a name="[fc]"></a>SX127X_ReadFifo</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, sx127x_drive.o(i.SX127X_ReadFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SX127X_ReadFifo &rArr; SX127X_ReadBuffer &rArr; Spi1ReadWriteByte &rArr; SpiHardWareRWByte
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_RxPacket
</UL>

<P><STRONG><a name="[f6]"></a>SX127X_Reset</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, sx127x_drive.o(i.SX127X_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SX127X_Reset &rArr; Gpio_WriteOutputIO &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_WriteOutputIO
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_Lora_init
</UL>

<P><STRONG><a name="[d8]"></a>SX127X_RxPacket</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, sx127x_drive.o(i.SX127X_RxPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SX127X_RxPacket &rArr; SX127X_Write &rArr; SX127X_WriteBuffer &rArr; Spi1ReadWriteByte &rArr; SpiHardWareRWByte
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_Write
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_Read
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_ReadFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraDatPro
</UL>

<P><STRONG><a name="[e7]"></a>SX127X_SetFreq</STRONG> (Thumb, 166 bytes, Stack size 48 bytes, sx127x_drive.o(i.SX127X_SetFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = SX127X_SetFreq &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_Write
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_StartRx
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_Read
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_StandbyMode
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_GetFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraSendDat
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_Lora_init
</UL>

<P><STRONG><a name="[f9]"></a>SX127X_StandbyMode</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sx127x_drive.o(i.SX127X_StandbyMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SX127X_StandbyMode &rArr; SX127X_Write &rArr; SX127X_WriteBuffer &rArr; Spi1ReadWriteByte &rArr; SpiHardWareRWByte
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_PoutSet
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_SetFreq
</UL>

<P><STRONG><a name="[d3]"></a>SX127X_StartRx</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, sx127x_drive.o(i.SX127X_StartRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SX127X_StartRx &rArr; SX127X_Write &rArr; SX127X_WriteBuffer &rArr; Spi1ReadWriteByte &rArr; SpiHardWareRWByte
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraDatPro
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLora
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_SetFreq
</UL>

<P><STRONG><a name="[fe]"></a>SX127X_TxPacket</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, sx127x_drive.o(i.SX127X_TxPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SX127X_TxPacket &rArr; SX127X_Write &rArr; SX127X_WriteBuffer &rArr; Spi1ReadWriteByte &rArr; SpiHardWareRWByte
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_Write
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendLoraDatPack
</UL>

<P><STRONG><a name="[d7]"></a>SX127X_Write</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, sx127x_drive.o(i.SX127X_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SX127X_Write &rArr; SX127X_WriteBuffer &rArr; Spi1ReadWriteByte &rArr; SpiHardWareRWByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_TxPacket
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_StartRx
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_RxPacket
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_Lora_init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraDatPro
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_StandbyMode
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_PoutSet
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_SetFreq
</UL>

<P><STRONG><a name="[ff]"></a>SX127X_WriteBuffer</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, sx127x_hal.o(i.SX127X_WriteBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SX127X_WriteBuffer &rArr; Spi1ReadWriteByte &rArr; SpiHardWareRWByte
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi1ReadWriteByte
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Stop
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_Write
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_TxPacket
</UL>

<P><STRONG><a name="[e3]"></a>SaveDevInfo</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sysconfig.o(i.SaveDevInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SaveDevInfo &rArr; FlashReadData &rArr; delay1ms
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteData
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraRecDat
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCSetDevUid
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDevInfoDef
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraRepDat
</UL>

<P><STRONG><a name="[100]"></a>SendLoraDatPack</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lora.o(i.SendLoraDatPack))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SendLoraDatPack &rArr; SX127X_TxPacket &rArr; SX127X_Write &rArr; SX127X_WriteBuffer &rArr; Spi1ReadWriteByte &rArr; SpiHardWareRWByte
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_TxPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendLoraPack
</UL>

<P><STRONG><a name="[e8]"></a>SendLoraPack</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, loradealdat.o(i.SendLoraPack))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SendLoraPack &rArr; SendLoraDatPack &rArr; SX127X_TxPacket &rArr; SX127X_Write &rArr; SX127X_WriteBuffer &rArr; Spi1ReadWriteByte &rArr; SpiHardWareRWByte
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendLoraDatPack
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraSendDat
</UL>

<P><STRONG><a name="[101]"></a>SendStr</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, hc_usart.o(i.SendStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SendStr &rArr; PCUsart1 &rArr; Uart_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCUsart1
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Soil_GetSoilTempAndHUmi
</UL>

<P><STRONG><a name="[bb]"></a>SetBit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ddl.o(i.SetBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_WriteOutputIO
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableIrq
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableFunc
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_DisableIrq
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ClrStatus
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPeripheralGate
</UL>

<P><STRONG><a name="[102]"></a>SetDevInfoDef</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, sysconfig.o(i.SetDevInfoDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SetDevInfoDef &rArr; SaveDevInfo &rArr; FlashReadData &rArr; delay1ms
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveDevInfo
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDevInfo
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TotalInit
</UL>

<P><STRONG><a name="[103]"></a>SetDevSerialNum</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, main.o(i.SetDevSerialNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = SetDevSerialNum &rArr; GetCo2SenorBySec &rArr; GetGetCo2Data &rArr; BH175_GetIllData &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseUartRx
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCSetDevUid
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCo2SenorBySec
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[e2]"></a>SetRepCnt</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, loradealdat.o(i.SetRepCnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetRepCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraRecDat
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraRepDat
</UL>

<P><STRONG><a name="[e4]"></a>SetWorkFreq</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, loradealdat.o(i.SetWorkFreq))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraRecDat
</UL>

<P><STRONG><a name="[ba]"></a>Soil_GetSoilTempAndHUmi</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, soil.o(i.Soil_GetSoilTempAndHUmi))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = Soil_GetSoilTempAndHUmi &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1ms
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStr
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModBusCrc
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSensorData
</UL>

<P><STRONG><a name="[fb]"></a>Spi1ReadWriteByte</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hc_spi.o(i.Spi1ReadWriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Spi1ReadWriteByte &rArr; SpiHardWareRWByte
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiHardWareRWByte
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_WriteBuffer
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_ReadBuffer
</UL>

<P><STRONG><a name="[106]"></a>SpiHardWareInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, hc_spi.o(i.SpiHardWareInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SpiHardWareInit &rArr; SpiPortInit &rArr; Gpio_Init &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPeripheralGate
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_Init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiPortInit
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInit
</UL>

<P><STRONG><a name="[105]"></a>SpiHardWareRWByte</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, hc_spi.o(i.SpiHardWareRWByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SpiHardWareRWByte
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_SendData
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_ReceiveData
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi1ReadWriteByte
</UL>

<P><STRONG><a name="[10c]"></a>SpiInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hc_spi.o(i.SpiInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SpiInit &rArr; SpiHardWareInit &rArr; SpiPortInit &rArr; Gpio_Init &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiHardWareInit
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TotalInit
</UL>

<P><STRONG><a name="[108]"></a>SpiPortInit</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, hc_spi.o(i.SpiPortInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SpiPortInit &rArr; Gpio_Init &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetAfMode
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddl_memclr
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPeripheralGate
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiHardWareInit
</UL>

<P><STRONG><a name="[109]"></a>Spi_GetStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, spi.o(i.Spi_GetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiHardWareRWByte
</UL>

<P><STRONG><a name="[107]"></a>Spi_Init</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, spi.o(i.Spi_Init))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiHardWareInit
</UL>

<P><STRONG><a name="[10b]"></a>Spi_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, spi.o(i.Spi_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiHardWareRWByte
</UL>

<P><STRONG><a name="[10a]"></a>Spi_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, spi.o(i.Spi_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiHardWareRWByte
</UL>

<P><STRONG><a name="[f4]"></a>Spi_SetCS</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, spi.o(i.Spi_SetCS))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Stop
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Start
</UL>

<P><STRONG><a name="[13]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupts_hc32l13x.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>Sysctrl_ClkSourceEnable</STRONG> (Thumb, 352 bytes, Stack size 24 bytes, sysctrl.o(i.Sysctrl_ClkSourceEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Sysctrl_ClkSourceEnable &rArr; delay10us
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay10us
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysctrlUnlock
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkInit
</UL>

<P><STRONG><a name="[110]"></a>Sysctrl_GetHClkFreq</STRONG> (Thumb, 354 bytes, Stack size 48 bytes, sysctrl.o(i.Sysctrl_GetHClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Sysctrl_GetHClkFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_GetPClkFreq
</UL>

<P><STRONG><a name="[112]"></a>Sysctrl_GetPClkFreq</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sysctrl.o(i.Sysctrl_GetPClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Sysctrl_GetPClkFreq &rArr; Sysctrl_GetHClkFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_GetHClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1Init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart0Init
</UL>

<P><STRONG><a name="[a0]"></a>Sysctrl_SetPeripheralGate</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, sysctrl.o(i.Sysctrl_SetPeripheralGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Sysctrl_SetPeripheralGate &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiPortInit
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiHardWareInit
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WdtInit
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimInit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkInit
</UL>

<P><STRONG><a name="[9f]"></a>Sysctrl_SetRCHTrim</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, sysctrl.o(i.Sysctrl_SetRCHTrim))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkInit
</UL>

<P><STRONG><a name="[9e]"></a>Sysctrl_SysClkSwitch</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, sysctrl.o(i.Sysctrl_SysClkSwitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Sysctrl_SysClkSwitch &rArr; SystemCoreClockUpdate &rArr; Sysctrl_GetHClkFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysctrlUnlock
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkInit
</UL>

<P><STRONG><a name="[113]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, system_hc32l13x.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SystemCoreClockUpdate &rArr; Sysctrl_GetHClkFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_GetHClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SysClkSwitch
</UL>

<P><STRONG><a name="[34]"></a>SystemInit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, system_hc32l13x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SystemInit &rArr; SystemCoreClockUpdate &rArr; Sysctrl_GetHClkFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HidePinInit
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(.text)
</UL>
<P><STRONG><a name="[22]"></a>TIM0_IRQHandler</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, hc_tim.o(i.TIM0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM0_IRQHandler &rArr; Bt_GetIntFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimSet
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_GetIntFlag
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_ClearIntFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TIM3_IRQHandler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, hc_time3.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim3_GetIntFlag
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim3_ClearIntFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[119]"></a>Tim3_ClearIntFlag</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timer3.o(i.Tim3_ClearIntFlag))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time3Init
</UL>

<P><STRONG><a name="[118]"></a>Tim3_GetIntFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, timer3.o(i.Tim3_GetIntFlag))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[122]"></a>Tim3_M0_ARRSet</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, timer3.o(i.Tim3_M0_ARRSet))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time3Init
</UL>

<P><STRONG><a name="[123]"></a>Tim3_M0_Cnt16Set</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, timer3.o(i.Tim3_M0_Cnt16Set))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time3Init
</UL>

<P><STRONG><a name="[126]"></a>Tim3_M0_Run</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, timer3.o(i.Tim3_M0_Run))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeCntStart
</UL>

<P><STRONG><a name="[124]"></a>Tim3_Mode0_EnableIrq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, timer3.o(i.Tim3_Mode0_EnableIrq))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time3Init
</UL>

<P><STRONG><a name="[121]"></a>Tim3_Mode0_Init</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, timer3.o(i.Tim3_Mode0_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Tim3_Mode0_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time3Init
</UL>

<P><STRONG><a name="[11a]"></a>TimInit</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, hc_tim.o(i.TimInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TimInit &rArr; EnableNvic &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddl_memclr
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableNvic
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPeripheralGate
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_Mode0_Init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_Mode0_EnableIrq
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_M0_Run
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_M0_Cnt16Set
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_M0_ARRSet
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_ClearIntFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TotalInit
</UL>

<P><STRONG><a name="[116]"></a>TimSet</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, hc_tim.o(i.TimSet))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM0_IRQHandler
</UL>

<P><STRONG><a name="[120]"></a>Time3Init</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, hc_time3.o(i.Time3Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Time3Init &rArr; EnableNvic &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddl_memclr
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableNvic
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim3_Mode0_Init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim3_Mode0_EnableIrq
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim3_M0_Cnt16Set
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim3_M0_ARRSet
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim3_ClearIntFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TotalInit
</UL>

<P><STRONG><a name="[125]"></a>TimeCntStart</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hc_time3.o(i.TimeCntStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TimeCntStart
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim3_M0_Run
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[127]"></a>TotalInit</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, hardware.o(i.TotalInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = TotalInit &rArr; GetChipId &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1ms
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLEDON
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WdtInit
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1Init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart0Init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time3Init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimInit
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInit
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDevInfoDef
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP30_Init
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDevInfo
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gxht_Restart
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashInit
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH175_Init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChipId
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOInit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkInit
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[1a]"></a>UART0_IRQHandler</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, hc_usart.o(i.UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART0_IRQHandler &rArr; Uart_ClrStatus &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ReceiveData
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_GetStatus
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ClrStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>UART1_IRQHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, hc_usart.o(i.UART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART1_IRQHandler &rArr; Uart_ClrStatus &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ReceiveData
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_GetStatus
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ClrStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l13x.o(RESET)
</UL>
<P><STRONG><a name="[12b]"></a>Uart_ClrStatus</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, uart.o(i.Uart_ClrStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Uart_ClrStatus &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1Init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart0Init
</UL>

<P><STRONG><a name="[a2]"></a>Uart_DisableIrq</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, uart.o(i.Uart_DisableIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Uart_DisableIrq &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseUartRx
</UL>

<P><STRONG><a name="[12d]"></a>Uart_EnableFunc</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, uart.o(i.Uart_EnableFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Uart_EnableFunc &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>

<P><STRONG><a name="[12e]"></a>Uart_EnableIrq</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, uart.o(i.Uart_EnableIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Uart_EnableIrq &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1Init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart0Init
</UL>

<P><STRONG><a name="[ec]"></a>Uart_GetStatus</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, uart.o(i.Uart_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Uart_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCUsart1
</UL>

<P><STRONG><a name="[12f]"></a>Uart_Init</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, uart.o(i.Uart_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Uart_Init &rArr; Uart_EnableFunc &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableFunc
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1Init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart0Init
</UL>

<P><STRONG><a name="[12c]"></a>Uart_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart.o(i.Uart_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[eb]"></a>Uart_SendDataIt</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uart.o(i.Uart_SendDataIt))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCUsart1
</UL>

<P><STRONG><a name="[128]"></a>Usart0Init</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, hc_usart.o(i.Usart0Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Usart0Init &rArr; Uart_Init &rArr; Uart_EnableFunc &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddl_memclr
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableNvic
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableIrq
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ClrStatus
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_GetPClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TotalInit
</UL>

<P><STRONG><a name="[129]"></a>Usart1Init</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, hc_usart.o(i.Usart1Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Usart1Init &rArr; Uart_Init &rArr; Uart_EnableFunc &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddl_memclr
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableNvic
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableIrq
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ClrStatus
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_GetPClkFreq
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartPortInit
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TotalInit
</UL>

<P><STRONG><a name="[133]"></a>UsartPortInit</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, hc_usart.o(i.UsartPortInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UsartPortInit &rArr; Gpio_Init &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetAfMode
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddl_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1Init
</UL>

<P><STRONG><a name="[b6]"></a>WdtFeedDog</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hc_wdt.o(i.WdtFeedDog))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WdtFeedDog
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wdt_Feed
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraPro
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCo2SenorBySec
</UL>

<P><STRONG><a name="[12a]"></a>WdtInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc_wdt.o(i.WdtInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WdtInit &rArr; Sysctrl_SetPeripheralGate &rArr; SetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPeripheralGate
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wdt_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TotalInit
</UL>

<P><STRONG><a name="[134]"></a>Wdt_Feed</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wdt.o(i.Wdt_Feed))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WdtFeedDog
</UL>

<P><STRONG><a name="[135]"></a>Wdt_Init</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, wdt.o(i.Wdt_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Wdt_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wdt_WriteWdtLoad
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WdtInit
</UL>

<P><STRONG><a name="[136]"></a>Wdt_WriteWdtLoad</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, wdt.o(i.Wdt_WriteWdtLoad))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wdt_Init
</UL>

<P><STRONG><a name="[10f]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sysctrl.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_GetHClkFreq
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkSourceEnable
</UL>

<P><STRONG><a name="[5f]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[50]"></a>_sys_exit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ddl.o(i._sys_exit))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[88]"></a>_ttywrch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ddl.o(i._ttywrch))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[ca]"></a>ddl_memclr</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ddl.o(i.ddl_memclr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ddl_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLora
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartPortInit
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiPortInit
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_IN
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1Init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart0Init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time3Init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimInit
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
</UL>

<P><STRONG><a name="[a7]"></a>delay100us</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ddl.o(i.delay100us))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delay100us
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraPro
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashInit
</UL>

<P><STRONG><a name="[cc]"></a>delay10us</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ddl.o(i.delay10us))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delay10us
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkSourceEnable
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
</UL>

<P><STRONG><a name="[91]"></a>delay1ms</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ddl.o(i.delay1ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delay1ms
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TotalInit
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraSendDat
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDShow
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGetCo2Data
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadData
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Soil_GetSoilTempAndHUmi
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP30_Init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP30_GetCo2Data
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gxht_GetTempAndHumi
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH175_Init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH175_GetIllData
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH175_Ready
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraRepDat
</UL>

<P><STRONG><a name="[c8]"></a>delay1us</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ddl.o(i.delay1us))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SendByte
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_ReadByte
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_ACK
</UL>

<P><STRONG><a name="[36]"></a>fputc</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, hc_usart.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fputc &rArr; Uart_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendDataIt
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[138]"></a>loraToMatchHost</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, main.o(i.loraToMatchHost))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = loraToMatchHost &rArr; LoraRecDat &rArr; LoraSendDat &rArr; LoraRepDat &rArr; LoraDatPro &rArr; InitLora &rArr; SX127X_Lora_init &rArr; SX127X_SetFreq &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraSendDat
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraRecDat
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysMin
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLEDON
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLEDOFF
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraPro
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCo2SenorBySec
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemReset
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[89]"></a>$Super$$main</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = $Super$$main &rArr; loraToMatchHost &rArr; LoraRecDat &rArr; LoraSendDat &rArr; LoraRepDat &rArr; LoraDatPro &rArr; InitLora &rArr; SX127X_Lora_init &rArr; SX127X_SetFreq &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WdtFeedDog
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TotalInit
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeCntStart
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysSec
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSensorData
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGetCo2Data
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugDevInfo
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLEDOFF
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loraToMatchHost
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDevSerialNum
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraPro
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[131]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>

<P><STRONG><a name="[139]"></a>_fadd</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[f8]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, frlef.o(x$fpl$frleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_cfrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_Lora_init
</UL>

<P><STRONG><a name="[13b]"></a>_frcmple</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, frlef.o(x$fpl$frleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
</UL>

<P><STRONG><a name="[179]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fsub), UNUSED)

<P><STRONG><a name="[13c]"></a>_fsub</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[ee]"></a>NVIC_SystemReset</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(i.NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loraToMatchHost
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadyToSend
</UL>

<P><STRONG><a name="[114]"></a>_HidePinInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, system_hc32l13x.o(i._HidePinInit))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[a5]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, interrupts_hc32l13x.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableNvic
</UL>

<P><STRONG><a name="[10e]"></a>_SysctrlUnlock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sysctrl.o(i._SysctrlUnlock))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SysClkSwitch
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkSourceEnable
</UL>

<P><STRONG><a name="[67]"></a>_dadd1</STRONG> (Thumb, 290 bytes, Stack size 20 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[66]"></a>_dsub1</STRONG> (Thumb, 470 bytes, Stack size 40 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[13d]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
</UL>

<P><STRONG><a name="[13a]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[37]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[10d]"></a>SysTick_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[85]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[79]"></a>_printf_mbtowc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[5a]"></a>_printf_truncate_signed</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[5b]"></a>_printf_truncate_unsigned</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<HR></body></html>
